// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Request /> should match snapshot 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    primary={true}
    style={
      Object {
        "backgroundColor": "#3f4140",
        "flex": 1,
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
      testID="invitation-text-container"
      useNativeDriver={true}
    >
      <View
        bottom={true}
        style={
          Object {
            "flex": 1,
            "justifyContent": "flex-end",
          }
        }
        testID="invitation-text-message-container"
      >
        <Animatable.View
          animation="bounceInDown"
          delay={100}
          duration={1500}
          testID="invitation-text-container-animation"
        >
          <View
            center={true}
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
              }
            }
            testID="invitation-text-container-message-title"
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              onPress={[Function]}
              style={
                Array [
                  Object {
                    "fontSize": 44,
                  },
                  Object {
                    "color": "#ffffff",
                  },
                  null,
                  null,
                  null,
                  null,
                  Object {
                    "marginBottom": 20,
                  },
                ]
              }
              testID="invitation-text-container-title"
            >
              Hi Test User
            </Text>
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              onPress={undefined}
              style={
                Array [
                  Object {
                    "fontSize": 27,
                  },
                  Object {
                    "color": "#ffffff",
                  },
                  null,
                  null,
                  null,
                  null,
                ]
              }
              testID="invitation-text-container-message"
            >
              Enterprise A agent wants to connect with you
            </Text>
          </View>
        </Animatable.View>
      </View>
      <View
        style={
          Object {
            "flex": 1,
          }
        }
        testID="invitation-text-container-avatars"
      >
        <Animatable.View
          animation="bounceInUp"
          delay={300}
          duration={1500}
          testID="invitation-text-container-avatars-animation"
        >
          <View
            row={true}
            style={
              Object {
                "flex": 1,
                "flexDirection": "row",
                "justifyContent": "space-around",
                "marginTop": 63,
              }
            }
            testID="invitation-text-avatars-container"
          >
            <View
              style={Object {}}
              testID="invitation-text-avatars-inviter"
            >
              <Image
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                hitSlop={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                source={
                  Object {
                    "uri": "https://image.url",
                  }
                }
                style={
                  Array [
                    Object {
                      "height": 76,
                      "width": 76,
                    },
                    Object {
                      "borderRadius": 38,
                    },
                  ]
                }
                testID={undefined}
              />
            </View>
            <Image
              source={1}
              style={
                Object {
                  "marginTop": 30,
                }
              }
            />
            <View
              style={Object {}}
              testID="invitation-text-avatars-invitee"
            >
              <Image
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                hitSlop={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                source={1}
                style={
                  Array [
                    Object {
                      "height": 76,
                      "width": 76,
                    },
                    Object {
                      "borderRadius": 38,
                    },
                  ]
                }
                testID={undefined}
              />
            </View>
          </View>
        </Animatable.View>
      </View>
    </View>
  </View>
  <View>
    <View
      row={true}
      style={
        Object {
          "flexDirection": "row",
        }
      }
    >
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ]
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#9E9E9E",
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "marginLeft": 15,
                  "marginRight": 15,
                  "padding": 19,
                },
                Object {
                  "backgroundColor": "#8F0CE8",
                },
                undefined,
                undefined,
                undefined,
                undefined,
                Object {
                  "backgroundColor": "#636564",
                },
                undefined,
                Object {
                  "shadowColor": "rgba(0,0,0, .4)",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 1,
                  },
                  "shadowOpacity": 1,
                  "shadowRadius": 1,
                },
                Object {
                  "padding": 12,
                },
                Array [
                  Object {
                    "marginLeft": 0,
                    "marginRight": 0,
                  },
                ],
                undefined,
                undefined,
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {},
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  Array [
                    Object {
                      "color": "white",
                      "fontSize": 16,
                    },
                    undefined,
                    Object {
                      "fontSize": 14,
                    },
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  ],
                ]
              }
            >
              Deny
            </Text>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ]
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#9E9E9E",
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "marginLeft": 15,
                  "marginRight": 15,
                  "padding": 19,
                },
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                Object {
                  "backgroundColor": "#85bf43",
                },
                undefined,
                Object {
                  "shadowColor": "rgba(0,0,0, .4)",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 1,
                  },
                  "shadowOpacity": 1,
                  "shadowRadius": 1,
                },
                Object {
                  "padding": 12,
                },
                Array [
                  Object {
                    "marginLeft": 0,
                    "marginRight": 0,
                  },
                ],
                undefined,
                undefined,
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {},
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  Array [
                    Object {
                      "color": "white",
                      "fontSize": 16,
                    },
                    undefined,
                    Object {
                      "fontSize": 14,
                    },
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  ],
                ]
              }
            >
              Allow
            </Text>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;
