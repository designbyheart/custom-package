// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Request /> should match snapshot 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    fifth={true}
    style={
      Object {
        "backgroundColor": "#ffffff",
        "flex": 1,
      }
    }
  >
    <View
      hCenter={true}
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
      testID="request-text-container"
      useNativeDriver={true}
    >
      <View
        bottom={true}
        style={
          Object {
            "flex": 1,
            "justifyContent": "flex-end",
          }
        }
        testID="request-text-message-container"
      >
        <Animatable.View
          animation="bounceInDown"
          delay={100}
          duration={1500}
          testID="request-text-container-animation"
        >
          <View
            center={true}
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
              }
            }
            testID="request-text-container-message-title"
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "fontSize": 20,
                  },
                  Object {
                    "fontFamily": "SF Pro Display",
                  },
                  Object {
                    "backgroundColor": "#ffffff",
                    "color": "#777777",
                  },
                  Object {
                    "fontWeight": "800",
                  },
                  Object {
                    "textAlign": "center",
                  },
                  null,
                  Object {
                    "lineHeight": 30,
                    "marginHorizontal": 30,
                    "marginVertical": 10,
                  },
                ]
              }
              testID="request-text-container-title"
            >
              Hi Test User
            </Text>
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "fontSize": 17,
                  },
                  Object {
                    "fontFamily": "SF Pro Display",
                  },
                  Object {
                    "backgroundColor": "#ffffff",
                    "color": "#777777",
                  },
                  Object {
                    "fontWeight": "bold",
                  },
                  Object {
                    "textAlign": "center",
                  },
                  null,
                  Object {
                    "margin": 10,
                  },
                ]
              }
              testID="request-text-container-message"
            >
              Enterprise A agent wants to connect with you
            </Text>
          </View>
        </Animatable.View>
      </View>
      <View
        style={
          Object {
            "flex": 1,
          }
        }
        testID="request-text-container-avatars"
      >
        <Animatable.View
          animation="bounceInUp"
          delay={300}
          duration={1500}
          testID="invitation-text-container-avatars-animation"
        >
          <View
            center={true}
            spaceBetween={true}
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "space-between",
              }
            }
          >
            <View
              row={true}
              spaceBetween={true}
              style={
                Object {
                  "alignItems": "center",
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginVertical": 40,
                }
              }
              testID="invitation-text-avatars-container"
              vCenter={true}
            >
              <View
                imageShadow="imageShadow"
                style={
                  Object {
                    "borderRadius": 38,
                    "shadowColor": "rgba(0, 0, 0, 0.25)",
                    "shadowOffset": Object {
                      "height": 3,
                      "width": 0,
                    },
                    "shadowOpacity": 1,
                    "shadowRadius": 8,
                  }
                }
                testID="invitation-text-avatars-invitee"
              >
                <Image
                  accessibilityComponentType={undefined}
                  accessibilityLabel={undefined}
                  accessibilityTraits={undefined}
                  accessible={true}
                  hitSlop={undefined}
                  nativeID={undefined}
                  onError={undefined}
                  onLayout={undefined}
                  onLoad={undefined}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  source={1}
                  style={
                    Array [
                      Object {
                        "height": 76,
                        "width": 76,
                      },
                      Object {
                        "borderRadius": 38,
                      },
                    ]
                  }
                  testID={undefined}
                />
              </View>
              <Image
                source={1}
                style={
                  Object {
                    "height": 8,
                    "marginHorizontal": 5,
                    "width": 60,
                  }
                }
              />
              <View
                imageShadow="imageShadow"
                style={
                  Object {
                    "borderRadius": 38,
                    "shadowColor": "rgba(0, 0, 0, 0.25)",
                    "shadowOffset": Object {
                      "height": 3,
                      "width": 0,
                    },
                    "shadowOpacity": 1,
                    "shadowRadius": 8,
                  }
                }
                testID="invitation-text-avatars-inviter"
              >
                <Image
                  accessibilityComponentType={undefined}
                  accessibilityLabel={undefined}
                  accessibilityTraits={undefined}
                  accessible={true}
                  hitSlop={undefined}
                  nativeID={undefined}
                  onError={undefined}
                  onLayout={undefined}
                  onLoad={undefined}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  source={
                    Object {
                      "uri": "https://image.url",
                    }
                  }
                  style={
                    Array [
                      Object {
                        "height": 76,
                        "width": 76,
                      },
                      Object {
                        "borderRadius": 38,
                      },
                    ]
                  }
                  testID={undefined}
                />
              </View>
            </View>
          </View>
        </Animatable.View>
      </View>
    </View>
  </View>
  <View>
    <View
      row={true}
      style={
        Object {
          "flexDirection": "row",
        }
      }
    >
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          style={Object {}}
        >
          <View
            style={
              Array [
                Object {
                  "marginLeft": 15,
                  "marginRight": 15,
                },
                Object {
                  "shadowColor": "rgba(0,0,0, .4)",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 1,
                  },
                  "shadowOpacity": 1,
                  "shadowRadius": 1,
                },
                Object {
                  "marginLeft": 0,
                  "marginRight": 0,
                },
                undefined,
              ]
            }
          >
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  undefined,
                ]
              }
              testID="request-deny"
              tvParallaxProperties={undefined}
            >
              <View
                pointerEvents="box-only"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#9E9E9E",
                      "flexDirection": "row",
                      "justifyContent": "center",
                      "padding": 19,
                    },
                    Object {
                      "backgroundColor": "#8F0CE8",
                    },
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    Object {
                      "backgroundColor": "rgba(119, 119, 119, 0.6)",
                    },
                    undefined,
                    Object {
                      "padding": 12,
                    },
                    undefined,
                    undefined,
                    undefined,
                    Array [
                      Object {
                        "paddingVertical": 17,
                      },
                    ],
                    undefined,
                    undefined,
                  ]
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Array [
                      Object {},
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      Array [
                        Object {
                          "color": "white",
                          "fontSize": 16,
                        },
                        Object {
                          "color": "#ffffff",
                        },
                        Object {
                          "fontSize": 14,
                        },
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                      ],
                    ]
                  }
                >
                  Deny
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          style={Object {}}
        >
          <View
            style={
              Array [
                Object {
                  "marginLeft": 15,
                  "marginRight": 15,
                },
                Object {
                  "shadowColor": "rgba(0,0,0, .4)",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 1,
                  },
                  "shadowOpacity": 1,
                  "shadowRadius": 1,
                },
                Object {
                  "marginLeft": 0,
                  "marginRight": 0,
                },
                undefined,
              ]
            }
          >
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  undefined,
                ]
              }
              testID="request-accept"
              tvParallaxProperties={undefined}
            >
              <View
                pointerEvents="box-only"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#9E9E9E",
                      "flexDirection": "row",
                      "justifyContent": "center",
                      "padding": 19,
                    },
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    Object {
                      "backgroundColor": "rgba(119, 119, 119, 1.0)",
                    },
                    undefined,
                    Object {
                      "padding": 12,
                    },
                    undefined,
                    undefined,
                    undefined,
                    Array [
                      Object {
                        "paddingVertical": 17,
                      },
                    ],
                    false,
                    false,
                  ]
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Array [
                      Object {},
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      Array [
                        Object {
                          "color": "white",
                          "fontSize": 16,
                        },
                        Object {
                          "color": "#ffffff",
                        },
                        Object {
                          "fontSize": 14,
                        },
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        false,
                      ],
                    ]
                  }
                >
                  Connect
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
    <WebView
      javaScriptEnabled={true}
      onMessage={[Function]}
      source={
        Object {
          "html": "
    <!DOCTYPE html>
    <html>
    <script>
    function fetchColorFromCanvas() {
      const options = {
        imageElement: document.getElementById(\\"__colorPickerCanvasImage\\")
      }
      var rgba = getColorPalettes(options);
      var message = {\\"message\\":'rgbValues',\\"payload\\":rgba};
      window.postMessage(JSON.stringify(message));
    }

    function getColorPalettes({imageElement, 
        count=3, 
        defaultPalette=[0, 0, 0, 1], 
        paletteType='dominant', 
        colorType='rgba'}
      ) {       
      const canvas = document.createElement('canvas');
      const	canvasContext = canvas.getContext && canvas.getContext('2d');

      if (!canvasContext) return defaultPalette;
      
      let imageWidth = canvas.width = imageElement.naturalWidth 
        || imageElement.offsetWidth 
        || imageElement.width;                

      const imageHeight = canvas.height = imageElement.naturalHeight 
        || imageElement.offsetHeight 
        || imageElement.height;                   

      canvasContext.drawImage(imageElement, 0, 0);
      if (paletteType === 'average')
        return getAveragePalette({imageWidth, imageHeight, canvasContext, colorType});
      else
        return getDominantPalettes(getAllPalettes(imageWidth, imageHeight, canvasContext), count, colorType);
    }

    function getAveragePalette({imageWidth, imageHeight, canvasContext, colorType = 'rgb'}) {
      const blockSize = 5
      let i = -4;
      let rgb = {r:0,g:0,b:0,a:1};
      let count = 0;
      
      try {
        data = canvasContext.getImageData(0, 0, imageWidth, imageHeight);
      } catch(e) {
        console.log(e);
      }
    
      while ((i += blockSize * 4) < data.data.length) {
        ++count;
        rgb.r += data.data[i];
        rgb.g += data.data[i+1];
        rgb.b += data.data[i+2];
      }
      rgb.r = ~~(rgb.r/count);
      rgb.g = ~~(rgb.g/count);
      rgb.b = ~~(rgb.b/count);
      if (colorType === 'hex')
        return [[rgbToHex([rgb.r, rgb.g, rgb.b])]]
      else
        return [[rgb.r, rgb.g, rgb.b, rgb.a]];
    }

    function rgbToHex(rgba) {
      let hexColor = '#';
      rgba.slice(0, 3).forEach(c => {
        let hex = c.toString(16);
        hexColor += hex.length == 1 ? \\"0\\" + hex : hex;  
      });
      return hexColor
    }

    function getAllPalettes(width, height, context) {
      let distinctPalettes = [];        
      for (var i=0; i<=height; i++) { 
        for (var j=0; j<=width; j++) { 
          try {
            data = context.getImageData(i, j, 1, 1);
            if (data.data.toString().trim() != \\"0,0,0,0\\") {
              distinctPalettes.push(data.data);
            }
          } catch(e) {
            console.log(e);
          }
        }
      }  
      return distinctPalettes;
    }

    function getDominantPalettes(allPalettes, distinctCount, colorType = 'rgb') {
      const combinations = getPaletteOccurrences(allPalettes);
      let palettes = combinations[0];
      let occurrences = combinations[1];
      const dominantPalettes = [];

      while (distinctCount) {               
        let dominant = 0, dominantKey = 0;  
        occurrences.forEach((v, k) => {           
          if (v > dominant) {
            dominant = v;              
            dominantKey = k;                               
          }
        });
        if (colorType === 'hex')
          dominantPalettes.push(rgbToHex(palettes[dominantKey]));
        else
          dominantPalettes.push(palettes[dominantKey]);
          
        palettes.splice(dominantKey, 1);            
        occurrences.splice(dominantKey, 1);
        distinctCount--;
      }
      return dominantPalettes;
    }        

    function getPaletteOccurrences(palettes) {
      let paletteList = [], occurrenceList = [], previousPalette;
      palettes.sort();
      palettes.forEach((palette, key) => {
        if (palette.toString() !== previousPalette) {
          paletteList.push(palette);
          occurrenceList.push(1);
        } else {
          occurrenceList[occurrenceList.length-1]++;
        }
        previousPalette = palettes[key].toString();
      });
      return [paletteList, occurrenceList];
    }

    const interval = setInterval(() => {
      var img = document.getElementById('__colorPickerCanvasImage');
      if (img.src.length !== 0) {
        fetchColorFromCanvas();
        clearInterval(interval);
      }
    },10);        

    </script>
    <body>
      <img src='data:image/jpeg;base64,' 
        id='__colorPickerCanvasImage' onload='fetchColorFromCanvas()'/>
    </body>
    </html>
  ",
        }
      }
    />
  </View>
</View>
`;
