// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MyConnectionsScreen /> should render MyConnections and redirect user to claim offer modal 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onGestureEvent={[Function]}
    onHandlerStateChange={[Function]}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "elevation": 0,
          "height": 96,
          "justifyContent": "center",
          "position": "absolute",
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
          "width": "100%",
          "zIndex": 1000,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#fff",
            "borderRadius": 10,
            "elevation": 0,
            "flexDirection": "row",
            "height": "100%",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 0.2,
            "shadowRadius": 10,
            "width": 343,
          }
        }
      >
        <View
          onPress={[Function]}
          style={
            Object {
              "borderRadius": 10,
              "flexDirection": "row",
              "height": "100%",
              "width": "100%",
            }
          }
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "height": "100%",
                "paddingTop": 16,
                "width": 64,
              }
            }
          >
            <View
              imageShadow={null}
              style={
                Object {
                  "borderRadius": 50,
                }
              }
            >
              <Image
                accessible={true}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                source={
                  Object {
                    "uri": "https://localhost/image.png",
                  }
                }
                style={
                  Array [
                    Object {
                      "height": 32,
                      "width": 32,
                    },
                    Object {
                      "borderRadius": 16,
                    },
                  ]
                }
              />
            </View>
          </View>
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "flexDirection": "row",
                  "height": "50%",
                }
              }
            >
              <View
                style={
                  Object {
                    "height": "100%",
                    "justifyContent": "flex-end",
                    "paddingBottom": 5,
                    "width": "80%",
                  }
                }
              >
                <Text
                  ellipsizeMode="tail"
                  numberOfLines={1}
                  style={
                    Object {
                      "color": "#4A4A4A",
                      "fontFamily": "Lato",
                      "fontSize": 17,
                      "fontWeight": "bold",
                    }
                  }
                >
                  Anonymous
                </Text>
              </View>
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "height": "100%",
                    "justifyContent": "center",
                    "width": "20%",
                  }
                }
              >
                <Text
                  style={
                    Object {
                      "color": "#a5a5a5",
                      "fontFamily": "Lato",
                      "fontSize": 11,
                      "marginBottom": 5,
                    }
                  }
                >
                  Now
                </Text>
              </View>
            </View>
            <View
              style={
                Object {
                  "flex": 1,
                  "height": "50%",
                }
              }
            >
              <View
                style={
                  Object {
                    "height": "100%",
                    "width": "96%",
                  }
                }
              >
                <Text
                  ellipsizeMode="tail"
                  numberOfLines={2}
                  style={
                    Object {
                      "color": "#777777",
                      "fontFamily": "Lato",
                      "fontSize": 14,
                    }
                  }
                >
                  Test wants you to share Address
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
  <View
    accessibilityLabel="my-connections-container"
    accessible={true}
    style={
      Object {
        "backgroundColor": "#fff",
        "height": "100%",
        "width": "100%",
      }
    }
    testID="my-connections-container"
  >
    <View
      accessibilityIgnoresInvertColors={true}
      style={
        Object {
          "height": "100%",
          "width": "100%",
        }
      }
    >
      <Image
        source={1}
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "height": "100%",
              "width": "100%",
            },
            undefined,
          ]
        }
      />
      <View
        center={true}
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "marginTop": 64,
          }
        }
      >
        <View
          center={true}
          style={
            Object {
              "alignItems": "center",
              "justifyContent": "center",
            }
          }
        >
          <Image
            resizeMode="contain"
            source={1}
            style={
              Object {
                "height": 90,
              }
            }
          />
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "fontSize": 23,
                },
                Object {
                  "fontFamily": "Lato",
                },
                Object {
                  "backgroundColor": "#333333",
                  "color": "#ffffff",
                },
                Object {
                  "fontWeight": "bold",
                },
                null,
                Object {
                  "backgroundColor": "transparent",
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                Object {
                  "color": "#EB9B2D",
                  "marginVertical": 5,
                  "textAlign": "center",
                },
              ]
            }
          >
            You now have a digital wallet!
          </Text>
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "fontSize": 17,
                },
                Object {
                  "fontFamily": "Lato",
                },
                Object {
                  "backgroundColor": "#333333",
                  "color": "#ffffff",
                },
                Object {
                  "fontWeight": "bold",
                },
                null,
                Object {
                  "backgroundColor": "transparent",
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                Object {
                  "color": "#505050",
                  "marginVertical": 5,
                },
              ]
            }
          >
            Want to see how it works?
          </Text>
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "fontSize": 15,
                },
                Object {
                  "fontFamily": "Lato",
                },
                Object {
                  "backgroundColor": "#333333",
                  "color": "#ffffff",
                },
                null,
                null,
                Object {
                  "backgroundColor": "transparent",
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                Object {
                  "color": "#505050",
                  "marginHorizontal": "5%",
                  "marginVertical": 5,
                  "textAlign": "center",
                },
              ]
            }
          >
            We have setup an optional tutorial site for you to go through using this Connect.Me app. To start this process, go to try.connect.me in a desktop browser and click Start Tutorial.
          </Text>
        </View>
      </View>
    </View>
    <RCTScrollView
      contentContainerStyle={
        Object {
          "paddingBottom": 170,
        }
      }
      data={
        Array [
          Object {
            "credentialName": "",
            "date": "",
            "index": Number {},
            "logoUrl": "",
            "newBadge": true,
            "questionTitle": "",
            "senderDID": "",
            "senderName": "",
            "status": "",
            "type": "",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onRefresh={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshControl={
        <RefreshControlMock
          onRefresh={[Function]}
          refreshing={false}
        />
      }
      refreshing={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "backgroundColor": "#fff",
          "height": "100%",
          "marginTop": 72,
          "width": "100%",
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <RCTRefreshControl />
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(134, 185, 59, 0.15)",
                "borderBottomColor": "#f2f2f2",
                "borderBottomWidth": 1,
                "flexDirection": "row",
                "height": 80,
                "opacity": 1,
                "width": "100%",
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "height": "100%",
                  "paddingTop": 16,
                  "width": 64,
                }
              }
            >
              <View
                imageShadow={null}
                style={
                  Object {
                    "borderRadius": 50,
                  }
                }
              >
                <Image
                  accessible={true}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  source={
                    Object {
                      "uri": "",
                    }
                  }
                  style={
                    Array [
                      Object {
                        "height": 32,
                        "width": 32,
                      },
                      Object {
                        "borderRadius": 16,
                      },
                    ]
                  }
                />
              </View>
            </View>
            <View
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                style={
                  Object {
                    "flex": 1,
                    "flexDirection": "row",
                    "height": "50%",
                  }
                }
              >
                <View
                  style={
                    Object {
                      "height": "100%",
                      "justifyContent": "flex-end",
                      "width": "68%",
                    }
                  }
                >
                  <Text
                    ellipsizeMode="tail"
                    numberOfLines={1}
                    style={
                      Object {
                        "color": "#4A4A4A",
                        "fontFamily": "Lato",
                        "fontSize": 17,
                        "fontWeight": "bold",
                      }
                    }
                  >
                    
                  </Text>
                </View>
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "height": "100%",
                      "justifyContent": "flex-end",
                      "width": "30%",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "alignItems": "center",
                        "backgroundColor": "#86B93B",
                        "height": 16,
                        "justifyContent": "center",
                        "marginBottom": 5,
                        "width": 64,
                      }
                    }
                  >
                    <Text
                      style={
                        Object {
                          "color": "#ffffff",
                          "fontFamily": "Lato",
                          "fontSize": 11,
                          "fontWeight": "500",
                        }
                      }
                    >
                      NEW
                    </Text>
                  </View>
                </View>
              </View>
              <View
                style={
                  Object {
                    "flex": 1,
                    "height": "50%",
                  }
                }
              >
                <View
                  style={
                    Object {
                      "height": "100%",
                      "width": "96%",
                    }
                  }
                >
                  <Text
                    ellipsizeMode="tail"
                    numberOfLines={1}
                    style={
                      Object {
                        "color": "#777777",
                        "fontFamily": "Lato",
                        "fontSize": 14,
                      }
                    }
                  />
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <BlurView
    blurAmount={8}
    blurType="light"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
        },
        Object {
          "height": 72,
          "position": "absolute",
          "top": 0,
          "width": "100%",
        },
      ]
    }
  />
  <View
    style={
      Object {
        "backgroundColor": "rgba(255, 255, 255, 0.8)",
        "elevation": 0,
        "flexDirection": "row",
        "height": 72,
        "position": "absolute",
        "shadowColor": "#000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.2,
        "shadowRadius": 10,
        "top": 0,
        "width": "100%",
        "zIndex": 1,
      }
    }
  >
    <View
      accessibilityLabel="burger-menu"
      accessible={true}
      style={
        Object {
          "height": "100%",
          "width": 64,
        }
      }
    >
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "marginRight": 6,
            "marginTop": 30,
            "opacity": 1,
          }
        }
        testID="burger-menu"
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight="32"
          bbWidth="32"
          height="32"
          meetOrSlice={0}
          minX={0}
          minY={0}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              Object {
                "marginLeft": 15,
              },
              null,
              Object {
                "flex": 0,
                "height": 32,
                "width": 32,
              },
            ]
          }
          vbHeight={32}
          vbWidth={32}
          width="32"
        >
          <RNSVGGroup
            fill={
              Array [
                0,
                4278190080,
              ]
            }
            fillOpacity={1}
            fillRule={1}
            font={Object {}}
            matrix={
              Array [
                1,
                0,
                0,
                1,
                0,
                0,
              ]
            }
            opacity={1}
            originX={0}
            originY={0}
            propList={Array []}
            rotation={0}
            scaleX={1}
            scaleY={1}
            skewX={0}
            skewY={0}
            stroke={null}
            strokeDasharray={null}
            strokeDashoffset={null}
            strokeLinecap={0}
            strokeLinejoin={0}
            strokeMiterlimit={4}
            strokeOpacity={1}
            strokeWidth={1}
            vectorEffect={0}
            x={0}
            y={0}
          >
            <RNSVGPath
              d="M5.264 8H26.7347C27.4307 8 28 8.56933 28 9.26533V9.40133C28 10.0973 27.4307 10.6667 26.7347 10.6667H5.264C4.568 10.6667 4 10.0973 4 9.40133V9.26533C4 8.56933 4.568 8 5.264 8ZM26.7347 14.6667H5.264C4.568 14.6667 4 15.236 4 15.932V16.068C4 16.764 4.568 17.3333 5.264 17.3333H26.7347C27.4307 17.3333 28 16.764 28 16.068V15.932C28 15.236 27.4307 14.6667 26.7347 14.6667ZM26.7347 21.3333H5.264C4.568 21.3333 4 21.9027 4 22.5987V22.7347C4 23.4307 4.568 24 5.264 24H26.7347C27.4307 24 28 23.4307 28 22.7347V22.5987C28 21.9027 27.4307 21.3333 26.7347 21.3333Z"
              fill={
                Array [
                  0,
                  4286019447,
                ]
              }
              fillOpacity={1}
              fillRule={0}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                  "fillRule",
                ]
              }
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={null}
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={0}
              strokeLinejoin={0}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={1}
              vectorEffect={0}
              x={0}
              y={0}
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
      <View
        style={
          Array [
            Object {
              "height": 0,
              "left": 0,
              "position": "absolute",
              "top": 0,
              "width": 0,
            },
          ]
        }
      >
        <Text
          style={
            Object {
              "color": "#FFF",
              "fontFamily": "Lato",
              "fontSize": 14,
              "fontWeight": "500",
            }
          }
        >
          0
        </Text>
      </View>
    </View>
    <View
      style={
        Object {
          "flexDirection": "row",
          "height": "100%",
          "justifyContent": "center",
          "width": 256,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#777777",
            "fontFamily": "Lato",
            "fontSize": 20,
            "fontWeight": "bold",
            "marginRight": 64,
            "marginTop": 33,
          }
        }
      >
        My Connections
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#FFF",
        "borderRadius": 30,
        "bottom": 20,
        "elevation": 0,
        "height": 50,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "shadowColor": "#000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.5,
        "shadowRadius": 5,
        "width": 50,
        "zIndex": 1000,
      }
    }
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight="22"
      bbWidth="22"
      height="22"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          undefined,
          null,
          Object {
            "flex": 0,
            "height": 22,
            "width": 22,
          },
        ]
      }
      vbHeight={24}
      vbWidth={24}
      width="22"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M16.83 5H20C21.1 5 22 5.9 22 7V19C22 20.1 21.1 21 20 21H4C2.9 21 2 20.1 2 19V7C2 5.9 2.9 5 4 5H7.17L9 3H15L16.83 5ZM4 19H20V7H15.95L14.12 5H9.88L8.05 7H4V19ZM12 8C9.24 8 7 10.24 7 13C7 15.76 9.24 18 12 18C14.76 18 17 15.76 17 13C17 10.24 14.76 8 12 8ZM9 13C9 14.65 10.35 16 12 16C13.65 16 15 14.65 15 13C15 11.35 13.65 10 12 10C10.35 10 9 11.35 9 13Z"
          fill={
            Array [
              0,
              4286019447,
            ]
          }
          fillOpacity={1}
          fillRule={0}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={
            Array [
              "fill",
              "fillRule",
            ]
          }
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
    <Text
      style={
        Object {
          "color": "#777",
          "fontFamily": "Lato",
          "fontSize": 9,
        }
      }
    >
      Scan
    </Text>
  </View>
</View>
`;

exports[`<MyConnectionsScreen /> should render MyConnections and show introductory text 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onGestureEvent={[Function]}
    onHandlerStateChange={[Function]}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "elevation": 0,
          "height": 96,
          "justifyContent": "center",
          "position": "absolute",
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
          "width": "100%",
          "zIndex": 1000,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#fff",
            "borderRadius": 10,
            "elevation": 0,
            "flexDirection": "row",
            "height": "100%",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 0.2,
            "shadowRadius": 10,
            "width": 343,
          }
        }
      >
        <View
          onPress={[Function]}
          style={
            Object {
              "borderRadius": 10,
              "flexDirection": "row",
              "height": "100%",
              "width": "100%",
            }
          }
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "height": "100%",
                "paddingTop": 16,
                "width": 64,
              }
            }
          >
            <View
              imageShadow={null}
              style={
                Object {
                  "borderRadius": 50,
                }
              }
            >
              <Image
                accessible={true}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                source={
                  Object {
                    "uri": "https://localhost/image.png",
                  }
                }
                style={
                  Array [
                    Object {
                      "height": 32,
                      "width": 32,
                    },
                    Object {
                      "borderRadius": 16,
                    },
                  ]
                }
              />
            </View>
          </View>
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "flexDirection": "row",
                  "height": "50%",
                }
              }
            >
              <View
                style={
                  Object {
                    "height": "100%",
                    "justifyContent": "flex-end",
                    "paddingBottom": 5,
                    "width": "80%",
                  }
                }
              >
                <Text
                  ellipsizeMode="tail"
                  numberOfLines={1}
                  style={
                    Object {
                      "color": "#4A4A4A",
                      "fontFamily": "Lato",
                      "fontSize": 17,
                      "fontWeight": "bold",
                    }
                  }
                >
                  Anonymous
                </Text>
              </View>
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "height": "100%",
                    "justifyContent": "center",
                    "width": "20%",
                  }
                }
              >
                <Text
                  style={
                    Object {
                      "color": "#a5a5a5",
                      "fontFamily": "Lato",
                      "fontSize": 11,
                      "marginBottom": 5,
                    }
                  }
                >
                  Now
                </Text>
              </View>
            </View>
            <View
              style={
                Object {
                  "flex": 1,
                  "height": "50%",
                }
              }
            >
              <View
                style={
                  Object {
                    "height": "100%",
                    "width": "96%",
                  }
                }
              >
                <Text
                  ellipsizeMode="tail"
                  numberOfLines={2}
                  style={
                    Object {
                      "color": "#777777",
                      "fontFamily": "Lato",
                      "fontSize": 14,
                    }
                  }
                >
                  Test wants you to share Address
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
  <View
    accessibilityLabel="my-connections-container"
    accessible={true}
    style={
      Object {
        "backgroundColor": "#fff",
        "height": "100%",
        "width": "100%",
      }
    }
    testID="my-connections-container"
  >
    <View
      accessibilityIgnoresInvertColors={true}
      style={
        Object {
          "height": "100%",
          "width": "100%",
        }
      }
    >
      <Image
        source={1}
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "height": "100%",
              "width": "100%",
            },
            undefined,
          ]
        }
      />
      <View
        center={true}
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "marginTop": 64,
          }
        }
      >
        <View
          center={true}
          style={
            Object {
              "alignItems": "center",
              "justifyContent": "center",
            }
          }
        >
          <Image
            resizeMode="contain"
            source={1}
            style={
              Object {
                "height": 90,
              }
            }
          />
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "fontSize": 23,
                },
                Object {
                  "fontFamily": "Lato",
                },
                Object {
                  "backgroundColor": "#333333",
                  "color": "#ffffff",
                },
                Object {
                  "fontWeight": "bold",
                },
                null,
                Object {
                  "backgroundColor": "transparent",
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                Object {
                  "color": "#EB9B2D",
                  "marginVertical": 5,
                  "textAlign": "center",
                },
              ]
            }
          >
            You now have a digital wallet!
          </Text>
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "fontSize": 17,
                },
                Object {
                  "fontFamily": "Lato",
                },
                Object {
                  "backgroundColor": "#333333",
                  "color": "#ffffff",
                },
                Object {
                  "fontWeight": "bold",
                },
                null,
                Object {
                  "backgroundColor": "transparent",
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                Object {
                  "color": "#505050",
                  "marginVertical": 5,
                },
              ]
            }
          >
            Want to see how it works?
          </Text>
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "fontSize": 15,
                },
                Object {
                  "fontFamily": "Lato",
                },
                Object {
                  "backgroundColor": "#333333",
                  "color": "#ffffff",
                },
                null,
                null,
                Object {
                  "backgroundColor": "transparent",
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                Object {
                  "color": "#505050",
                  "marginHorizontal": "5%",
                  "marginVertical": 5,
                  "textAlign": "center",
                },
              ]
            }
          >
            We have setup an optional tutorial site for you to go through using this Connect.Me app. To start this process, go to try.connect.me in a desktop browser and click Start Tutorial.
          </Text>
        </View>
      </View>
    </View>
    <RCTScrollView
      contentContainerStyle={
        Object {
          "paddingBottom": 170,
        }
      }
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onRefresh={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshControl={
        <RefreshControlMock
          onRefresh={[Function]}
          refreshing={false}
        />
      }
      refreshing={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "backgroundColor": "#fff",
          "height": "100%",
          "marginTop": 72,
          "width": "100%",
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <RCTRefreshControl />
      <View />
    </RCTScrollView>
  </View>
  <BlurView
    blurAmount={8}
    blurType="light"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
        },
        Object {
          "height": 72,
          "position": "absolute",
          "top": 0,
          "width": "100%",
        },
      ]
    }
  />
  <View
    style={
      Object {
        "backgroundColor": "rgba(255, 255, 255, 0.8)",
        "elevation": 0,
        "flexDirection": "row",
        "height": 72,
        "position": "absolute",
        "shadowColor": "#000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.2,
        "shadowRadius": 10,
        "top": 0,
        "width": "100%",
        "zIndex": 1,
      }
    }
  >
    <View
      accessibilityLabel="burger-menu"
      accessible={true}
      style={
        Object {
          "height": "100%",
          "width": 64,
        }
      }
    >
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "marginRight": 6,
            "marginTop": 30,
            "opacity": 1,
          }
        }
        testID="burger-menu"
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight="32"
          bbWidth="32"
          height="32"
          meetOrSlice={0}
          minX={0}
          minY={0}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              Object {
                "marginLeft": 15,
              },
              null,
              Object {
                "flex": 0,
                "height": 32,
                "width": 32,
              },
            ]
          }
          vbHeight={32}
          vbWidth={32}
          width="32"
        >
          <RNSVGGroup
            fill={
              Array [
                0,
                4278190080,
              ]
            }
            fillOpacity={1}
            fillRule={1}
            font={Object {}}
            matrix={
              Array [
                1,
                0,
                0,
                1,
                0,
                0,
              ]
            }
            opacity={1}
            originX={0}
            originY={0}
            propList={Array []}
            rotation={0}
            scaleX={1}
            scaleY={1}
            skewX={0}
            skewY={0}
            stroke={null}
            strokeDasharray={null}
            strokeDashoffset={null}
            strokeLinecap={0}
            strokeLinejoin={0}
            strokeMiterlimit={4}
            strokeOpacity={1}
            strokeWidth={1}
            vectorEffect={0}
            x={0}
            y={0}
          >
            <RNSVGPath
              d="M5.264 8H26.7347C27.4307 8 28 8.56933 28 9.26533V9.40133C28 10.0973 27.4307 10.6667 26.7347 10.6667H5.264C4.568 10.6667 4 10.0973 4 9.40133V9.26533C4 8.56933 4.568 8 5.264 8ZM26.7347 14.6667H5.264C4.568 14.6667 4 15.236 4 15.932V16.068C4 16.764 4.568 17.3333 5.264 17.3333H26.7347C27.4307 17.3333 28 16.764 28 16.068V15.932C28 15.236 27.4307 14.6667 26.7347 14.6667ZM26.7347 21.3333H5.264C4.568 21.3333 4 21.9027 4 22.5987V22.7347C4 23.4307 4.568 24 5.264 24H26.7347C27.4307 24 28 23.4307 28 22.7347V22.5987C28 21.9027 27.4307 21.3333 26.7347 21.3333Z"
              fill={
                Array [
                  0,
                  4286019447,
                ]
              }
              fillOpacity={1}
              fillRule={0}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                  "fillRule",
                ]
              }
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={null}
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={0}
              strokeLinejoin={0}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={1}
              vectorEffect={0}
              x={0}
              y={0}
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
      <View
        style={
          Array [
            Object {
              "height": 0,
              "left": 0,
              "position": "absolute",
              "top": 0,
              "width": 0,
            },
          ]
        }
      >
        <Text
          style={
            Object {
              "color": "#FFF",
              "fontFamily": "Lato",
              "fontSize": 14,
              "fontWeight": "500",
            }
          }
        >
          0
        </Text>
      </View>
    </View>
    <View
      style={
        Object {
          "flexDirection": "row",
          "height": "100%",
          "justifyContent": "center",
          "width": 256,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#777777",
            "fontFamily": "Lato",
            "fontSize": 20,
            "fontWeight": "bold",
            "marginRight": 64,
            "marginTop": 33,
          }
        }
      >
        My Connections
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#FFF",
        "borderRadius": 30,
        "bottom": 20,
        "elevation": 0,
        "height": 50,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "shadowColor": "#000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.5,
        "shadowRadius": 5,
        "width": 50,
        "zIndex": 1000,
      }
    }
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight="22"
      bbWidth="22"
      height="22"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          undefined,
          null,
          Object {
            "flex": 0,
            "height": 22,
            "width": 22,
          },
        ]
      }
      vbHeight={24}
      vbWidth={24}
      width="22"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M16.83 5H20C21.1 5 22 5.9 22 7V19C22 20.1 21.1 21 20 21H4C2.9 21 2 20.1 2 19V7C2 5.9 2.9 5 4 5H7.17L9 3H15L16.83 5ZM4 19H20V7H15.95L14.12 5H9.88L8.05 7H4V19ZM12 8C9.24 8 7 10.24 7 13C7 15.76 9.24 18 12 18C14.76 18 17 15.76 17 13C17 10.24 14.76 8 12 8ZM9 13C9 14.65 10.35 16 12 16C13.65 16 15 14.65 15 13C15 11.35 13.65 10 12 10C10.35 10 9 11.35 9 13Z"
          fill={
            Array [
              0,
              4286019447,
            ]
          }
          fillOpacity={1}
          fillRule={0}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={
            Array [
              "fill",
              "fillRule",
            ]
          }
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
    <Text
      style={
        Object {
          "color": "#777",
          "fontFamily": "Lato",
          "fontSize": 9,
        }
      }
    >
      Scan
    </Text>
  </View>
</View>
`;
