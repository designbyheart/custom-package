// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ConnectionHistory /> should ConnectionHistory render properly 1`] = `
<View
  fifth={true}
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <View
    style={undefined}
  >
    <SRSRadialGradient
      center={
        Array [
          160,
          45,
        ]
      }
      colors={
        Array [
          4286019447,
          2574743415,
        ]
      }
      radius={960}
      stops={
        Array [
          0.1,
          0.4,
        ]
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <View
      fifth={true}
      style={
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 40,
          "shadowColor": "#777777",
          "shadowOffset": Object {
            "height": 10,
            "width": 0,
          },
          "shadowOpacity": 0.3,
          "shadowRadius": 10,
          "zIndex": 4,
        }
      }
      testID="connection-history-header"
    >
      <View
        fifth={true}
        hCenter={true}
        style={
          Object {
            "backgroundColor": "transparent",
            "height": 90,
            "justifyContent": "center",
          }
        }
      >
        <View
          absolute="TopRight"
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          clearBg={true}
          hitSlop={
            Object {
              "bottom": 30,
              "left": 30,
              "right": 30,
              "top": 30,
            }
          }
          iconStyle={
            Array [
              Object {
                "marginRight": 15,
              },
            ]
          }
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          small={true}
          src={1}
          style={
            Object {
              "backgroundColor": "transparent",
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": 2,
            }
          }
          testID="connection-history-icon-close-touchable"
        >
          <Image
            resizeMode="contain"
            source={1}
            style={
              Array [
                Object {
                  "height": 20,
                  "width": 20,
                },
                null,
                Object {
                  "marginRight": 15,
                },
              ]
            }
            testID="connection-history-icon-close"
          />
        </View>
        <View
          center={true}
          clearBg={true}
          extraLarge={true}
          halo={true}
          iconStyle={
            Array [
              Object {
                "borderRadius": 40,
              },
            ]
          }
          resizeMode="cover"
          src={
            Object {
              "uri": "https://test.com/image.png",
            }
          }
          style={
            Object {
              "alignItems": "center",
              "alignSelf": "center",
              "backgroundColor": "transparent",
              "bottom": 0,
              "height": 80,
              "justifyContent": "center",
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": 1,
            }
          }
          testID="connection-history-issuer-logo"
        >
          <View
            center={true}
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "rgba(0,0,0,0.07)",
                "borderRadius": 50,
                "height": 100,
                "justifyContent": "center",
                "width": 100,
              }
            }
          >
            <Image
              resizeMode="cover"
              source={
                Object {
                  "uri": "https://test.com/image.png",
                }
              }
              style={
                Array [
                  Object {
                    "height": 80,
                    "width": 80,
                  },
                  Object {
                    "borderRadius": 40,
                  },
                  Object {
                    "borderRadius": 40,
                  },
                ]
              }
              testID="connection-history-issuer-logo"
            />
          </View>
        </View>
        <View
          absolute="TopLeft"
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          clearBg={true}
          hitSlop={
            Object {
              "bottom": 30,
              "left": 30,
              "right": 30,
              "top": 30,
            }
          }
          iconStyle={
            Array [
              Object {
                "marginLeft": 15,
              },
            ]
          }
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          resizeMode="contain"
          small={true}
          src={1}
          style={
            Object {
              "backgroundColor": "transparent",
              "left": 0,
              "position": "absolute",
              "top": 0,
              "zIndex": 2,
            }
          }
          testID="connection-history-icon-delete-touchable"
        >
          <Image
            resizeMode="contain"
            source={1}
            style={
              Array [
                Object {
                  "height": 20,
                  "width": 20,
                },
                null,
                Object {
                  "marginLeft": 15,
                },
              ]
            }
            testID="connection-history-icon-delete"
          />
        </View>
      </View>
      <View
        center={true}
        fifth={true}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "justifyContent": "center",
            "marginBottom": 15,
            "marginHorizontal": 10,
            "marginTop": 5,
            "paddingBottom": 0,
          }
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "fontSize": 17,
              },
              Object {
                "fontFamily": "SF Pro Display",
              },
              Object {
                "backgroundColor": "#ffffff",
                "color": "#777777",
              },
              Object {
                "fontWeight": "600",
              },
              Object {
                "textAlign": "center",
              },
              null,
              Array [
                Object {
                  "color": "#ffffff",
                  "marginTop": 5,
                },
                Object {
                  "backgroundColor": "transparent",
                },
              ],
            ]
          }
        >
          Evernym
        </Text>
      </View>
      <WebView
        javaScriptEnabled={true}
        onMessage={[Function]}
        source={
          Object {
            "html": "
    <!DOCTYPE html>
    <html>
    <script>
    function fetchColorFromCanvas() {
      const options = {
        imageElement: document.getElementById(\\"__colorPickerCanvasImage\\")
      }
      var rgba = getColorPalettes(options);
      var message = {\\"message\\":'rgbValues',\\"payload\\":rgba};
      window.postMessage(JSON.stringify(message));
    }

    function getColorPalettes({imageElement, 
        count=3, 
        defaultPalette=[0, 0, 0, 1], 
        paletteType='dominant', 
        colorType='rgba'}
      ) {       
      const canvas = document.createElement('canvas');
      const	canvasContext = canvas.getContext && canvas.getContext('2d');

      if (!canvasContext) return defaultPalette;
      
      let imageWidth = canvas.width = imageElement.naturalWidth 
        || imageElement.offsetWidth 
        || imageElement.width;                

      const imageHeight = canvas.height = imageElement.naturalHeight 
        || imageElement.offsetHeight 
        || imageElement.height;                   

      canvasContext.drawImage(imageElement, 0, 0);
      if (paletteType === 'average')
        return getAveragePalette({imageWidth, imageHeight, canvasContext, colorType});
      else
        return getDominantPalettes(getAllPalettes(imageWidth, imageHeight, canvasContext), count, colorType);
    }

    function getAveragePalette({imageWidth, imageHeight, canvasContext, colorType = 'rgb'}) {
      const blockSize = 5
      let i = -4;
      let rgb = {r:0,g:0,b:0,a:1};
      let count = 0;
      
      try {
        data = canvasContext.getImageData(0, 0, imageWidth, imageHeight);
      } catch(e) {
        console.log(e);
      }
    
      while ((i += blockSize * 4) < data.data.length) {
        ++count;
        rgb.r += data.data[i];
        rgb.g += data.data[i+1];
        rgb.b += data.data[i+2];
      }
      rgb.r = ~~(rgb.r/count);
      rgb.g = ~~(rgb.g/count);
      rgb.b = ~~(rgb.b/count);
      if (colorType === 'hex')
        return [[rgbToHex([rgb.r, rgb.g, rgb.b])]]
      else
        return [[rgb.r, rgb.g, rgb.b, rgb.a]];
    }

    function rgbToHex(rgba) {
      let hexColor = '#';
      rgba.slice(0, 3).forEach(c => {
        let hex = c.toString(16);
        hexColor += hex.length == 1 ? \\"0\\" + hex : hex;  
      });
      return hexColor
    }

    function getAllPalettes(width, height, context) {
      let distinctPalettes = [];        
      for (var i=0; i<=height; i++) { 
        for (var j=0; j<=width; j++) { 
          try {
            data = context.getImageData(i, j, 1, 1);
            if (data.data.toString().trim() != \\"0,0,0,0\\") {
              distinctPalettes.push(data.data);
            }
          } catch(e) {
            console.log(e);
          }
        }
      }  
      return distinctPalettes;
    }

    function getDominantPalettes(allPalettes, distinctCount, colorType = 'rgb') {
      const combinations = getPaletteOccurrences(allPalettes);
      let palettes = combinations[0];
      let occurrences = combinations[1];
      const dominantPalettes = [];

      while (distinctCount) {               
        let dominant = 0, dominantKey = 0;  
        occurrences.forEach((v, k) => {           
          if (v > dominant) {
            dominant = v;              
            dominantKey = k;                               
          }
        });
        if (colorType === 'hex')
          dominantPalettes.push(rgbToHex(palettes[dominantKey]));
        else
          dominantPalettes.push(palettes[dominantKey]);
          
        palettes.splice(dominantKey, 1);            
        occurrences.splice(dominantKey, 1);
        distinctCount--;
      }
      return dominantPalettes;
    }        

    function getPaletteOccurrences(palettes) {
      let paletteList = [], occurrenceList = [], previousPalette;
      palettes.sort();
      palettes.forEach((palette, key) => {
        if (palette.toString() !== previousPalette) {
          paletteList.push(palette);
          occurrenceList.push(1);
        } else {
          occurrenceList[occurrenceList.length-1]++;
        }
        previousPalette = palettes[key].toString();
      });
      return [paletteList, occurrenceList];
    }

    const interval = setInterval(() => {
      var img = document.getElementById('__colorPickerCanvasImage');
      if (img.src.length !== 0) {
        fetchColorFromCanvas();
        clearInterval(interval);
      }
    },10);        

    </script>
    <body>
      <img src='data:image/jpeg;base64,' 
        id='__colorPickerCanvasImage' onload='fetchColorFromCanvas()'/>
    </body>
    </html>
  ",
          }
        }
      />
    </View>
  </View>
  <RCTScrollView>
    <View>
      <View
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderColor": "#bbb",
              "borderTopWidth": 1,
              "marginTop": 20,
            },
            Object {
              "borderBottomWidth": 0,
              "marginTop": 0,
            },
          ]
        }
      >
        <View
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "fontSize": 20,
                },
                Object {
                  "fontFamily": "SF Pro Display",
                },
                Object {
                  "backgroundColor": "#f0f0f0",
                  "color": "#333333",
                },
                Object {
                  "fontWeight": "600",
                },
                null,
                null,
                Object {
                  "paddingLeft": 15,
                  "paddingVertical": 10,
                },
              ]
            }
          >
            September 2017
          </Text>
          <View
            avatar={
              <Icon
                iconStyle={
                  Array [
                    Object {
                      "tintColor": "rgba(119, 119, 119, 1.0)",
                    },
                  ]
                }
                small={true}
                src={1}
              />
            }
            disabled={false}
            onLongPress={undefined}
            onPress={undefined}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "borderBottomColor": "#bbb",
                  "borderBottomWidth": 1,
                  "paddingBottom": 10,
                  "paddingRight": 10,
                  "paddingTop": 10,
                },
                Object {
                  "borderBottomWidth": 2,
                },
                false,
                false,
              ]
            }
            underlayColor="white"
          >
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "marginLeft": 10,
                  },
                  undefined,
                ]
              }
            >
              <View
                clearBg={true}
                iconStyle={
                  Array [
                    Object {
                      "tintColor": "rgba(119, 119, 119, 1.0)",
                    },
                  ]
                }
                small={true}
                src={1}
                style={
                  Object {
                    "backgroundColor": "transparent",
                  }
                }
              >
                <Image
                  resizeMode="contain"
                  source={1}
                  style={
                    Array [
                      Object {
                        "height": 20,
                        "width": 20,
                      },
                      null,
                      Object {
                        "tintColor": "rgba(119, 119, 119, 1.0)",
                      },
                    ]
                  }
                  testID={undefined}
                />
              </View>
              <View
                style={
                  Object {
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
              >
                <View
                  style={undefined}
                >
                  <View>
                    <View
                      row={true}
                      style={
                        Object {
                          "flexDirection": "row",
                        }
                      }
                    >
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        style={
                          Array [
                            Object {
                              "fontSize": 17,
                            },
                            Object {
                              "fontFamily": "SF Pro Display",
                            },
                            Object {
                              "backgroundColor": "#ffffff",
                              "color": "#777777",
                            },
                            Object {
                              "fontWeight": "600",
                            },
                            null,
                            null,
                            Object {
                              "marginBottom": 5,
                              "marginLeft": 10,
                            },
                            Object {
                              "color": "rgba(119, 119, 119, 1.0)",
                            },
                          ]
                        }
                      >
                        CONNECTED
                      </Text>
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        style={
                          Array [
                            Object {
                              "fontSize": 17,
                            },
                            Object {
                              "fontFamily": "SF Pro Display",
                            },
                            Object {
                              "backgroundColor": "#ffffff",
                              "color": "#777777",
                            },
                            Object {
                              "fontWeight": "600",
                            },
                            null,
                            null,
                            Object {
                              "color": "#333333",
                            },
                          ]
                        }
                      >
                         - Enterprise name
                      </Text>
                    </View>
                  </View>
                </View>
                <View
                  style={undefined}
                >
                  <View>
                    <View
                      row={true}
                      style={
                        Object {
                          "flexDirection": "row",
                        }
                      }
                    >
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        style={
                          Array [
                            Object {
                              "fontSize": 12,
                            },
                            Object {
                              "fontFamily": "SF Pro Display",
                            },
                            Object {
                              "backgroundColor": "#ffffff",
                              "color": "#777777",
                            },
                            null,
                            null,
                            null,
                            Object {
                              "marginLeft": 10,
                            },
                          ]
                        }
                      >
                        2018-01-10T04:32:43+05:30
                      </Text>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
