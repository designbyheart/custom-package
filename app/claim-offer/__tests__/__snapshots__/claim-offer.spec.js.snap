// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ClaimOffer /> should call claimOfferShown on componentDidMount 1`] = `
<View
  fifth={true}
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <View
    fifth={true}
    style={
      Object {
        "backgroundColor": "#ffffff",
        "paddingTop": 40,
        "shadowColor": "#777777",
        "shadowOffset": Object {
          "height": 10,
          "width": 0,
        },
        "shadowOpacity": 0.3,
        "shadowRadius": 10,
        "zIndex": 4,
      }
    }
    testID="claim-offer-header"
  >
    <View
      fifth={true}
      hCenter={true}
      style={
        Object {
          "backgroundColor": "#ffffff",
          "height": 90,
          "justifyContent": "center",
        }
      }
    >
      <View
        absolute="TopRight"
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        clearBg={true}
        hitSlop={undefined}
        iconStyle={
          Array [
            Object {
              "marginRight": 15,
            },
          ]
        }
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        small={true}
        src={1}
        style={
          Object {
            "backgroundColor": "transparent",
            "position": "absolute",
            "right": 0,
            "top": 0,
            "zIndex": 2,
          }
        }
        testID="claim-offer-icon-close-touchable"
      >
        <Image
          resizeMode="contain"
          source={1}
          style={
            Array [
              Object {
                "height": 20,
                "width": 20,
              },
              null,
              Object {
                "marginRight": 15,
              },
            ]
          }
          testID="claim-offer-icon-close"
        />
      </View>
      <View
        style={
          Array [
            Array [
              Object {
                "backgroundColor": "#f79347",
                "height": 20,
                "width": "100%",
                "zIndex": -1,
              },
            ],
            Object {
              "backgroundColor": "rgba(119, 119, 119, 1.0)",
            },
          ]
        }
      />
      <View
        center={true}
        clearBg={true}
        extraLarge={true}
        halo={true}
        iconStyle={
          Array [
            Object {
              "borderRadius": 40,
            },
          ]
        }
        resizeMode="cover"
        src={
          Object {
            "uri": "http://testissuer.com/logoUrl.png",
          }
        }
        style={
          Object {
            "alignItems": "center",
            "alignSelf": "center",
            "backgroundColor": "transparent",
            "bottom": 0,
            "height": 80,
            "justifyContent": "center",
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "zIndex": 1,
          }
        }
        testID="claim-offer-issuer-logo"
      >
        <View
          center={true}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "rgba(0,0,0,0.07)",
              "borderRadius": 50,
              "height": 100,
              "justifyContent": "center",
              "width": 100,
            }
          }
        >
          <Image
            resizeMode="cover"
            source={
              Object {
                "uri": "http://testissuer.com/logoUrl.png",
              }
            }
            style={
              Array [
                Object {
                  "height": 80,
                  "width": 80,
                },
                Object {
                  "borderRadius": 40,
                },
                Object {
                  "borderRadius": 40,
                },
              ]
            }
            testID="claim-offer-issuer-logo"
          />
        </View>
      </View>
    </View>
    <View
      center={true}
      fifth={true}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#ffffff",
          "justifyContent": "center",
          "marginHorizontal": 10,
          "marginTop": 5,
          "paddingBottom": 20,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "fontSize": 17,
            },
            Object {
              "fontFamily": "SF Pro Display",
            },
            Object {
              "backgroundColor": "#ffffff",
              "color": "#777777",
            },
            Object {
              "fontWeight": "600",
            },
            Object {
              "textAlign": "center",
            },
            null,
            Array [],
          ]
        }
      >
        Test Issuer is offering you
      </Text>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "fontSize": 20,
            },
            Object {
              "fontFamily": "SF Pro Display",
            },
            Object {
              "backgroundColor": "#ffffff",
              "color": "#777777",
            },
            Object {
              "fontWeight": "900",
            },
            null,
            null,
            Object {
              "marginTop": 5,
            },
            Object {},
          ]
        }
      >
        Home Address
      </Text>
    </View>
    <WebView
      javaScriptEnabled={true}
      onMessage={[Function]}
      source={
        Object {
          "html": "
    <!DOCTYPE html>
    <html>
    <script>
    function fetchColorFromCanvas() {
      const options = {
        imageElement: document.getElementById(\\"__colorPickerCanvasImage\\")
      }
      var rgba = getColorPalettes(options);
      var message = {\\"message\\":'rgbValues',\\"payload\\":rgba};
      window.postMessage(JSON.stringify(message));
    }

    function getColorPalettes({imageElement, 
        count=3, 
        defaultPalette=[0, 0, 0, 1], 
        paletteType='dominant', 
        colorType='rgba'}
      ) {       
      const canvas = document.createElement('canvas');
      const	canvasContext = canvas.getContext && canvas.getContext('2d');

      if (!canvasContext) return defaultPalette;
      
      let imageWidth = canvas.width = imageElement.naturalWidth 
        || imageElement.offsetWidth 
        || imageElement.width;                

      const imageHeight = canvas.height = imageElement.naturalHeight 
        || imageElement.offsetHeight 
        || imageElement.height;                   

      canvasContext.drawImage(imageElement, 0, 0);
      if (paletteType === 'average')
        return getAveragePalette({imageWidth, imageHeight, canvasContext, colorType});
      else
        return getDominantPalettes(getAllPalettes(imageWidth, imageHeight, canvasContext), count, colorType);
    }

    function getAveragePalette({imageWidth, imageHeight, canvasContext, colorType = 'rgb'}) {
      const blockSize = 5
      let i = -4;
      let rgb = {r:0,g:0,b:0,a:1};
      let count = 0;
      
      try {
        data = canvasContext.getImageData(0, 0, imageWidth, imageHeight);
      } catch(e) {
        console.log(e);
      }
    
      while ((i += blockSize * 4) < data.data.length) {
        ++count;
        rgb.r += data.data[i];
        rgb.g += data.data[i+1];
        rgb.b += data.data[i+2];
      }
      rgb.r = ~~(rgb.r/count);
      rgb.g = ~~(rgb.g/count);
      rgb.b = ~~(rgb.b/count);
      if (colorType === 'hex')
        return [[rgbToHex([rgb.r, rgb.g, rgb.b])]]
      else
        return [[rgb.r, rgb.g, rgb.b, rgb.a]];
    }

    function rgbToHex(rgba) {
      let hexColor = '#';
      rgba.slice(0, 3).forEach(c => {
        let hex = c.toString(16);
        hexColor += hex.length == 1 ? \\"0\\" + hex : hex;  
      });
      return hexColor
    }

    function getAllPalettes(width, height, context) {
      let distinctPalettes = [];        
      for (var i=0; i<=height; i++) { 
        for (var j=0; j<=width; j++) { 
          try {
            data = context.getImageData(i, j, 1, 1);
            if (data.data.toString().trim() != \\"0,0,0,0\\") {
              distinctPalettes.push(data.data);
            }
          } catch(e) {
            console.log(e);
          }
        }
      }  
      return distinctPalettes;
    }

    function getDominantPalettes(allPalettes, distinctCount, colorType = 'rgb') {
      const combinations = getPaletteOccurrences(allPalettes);
      let palettes = combinations[0];
      let occurrences = combinations[1];
      const dominantPalettes = [];

      while (distinctCount) {               
        let dominant = 0, dominantKey = 0;  
        occurrences.forEach((v, k) => {           
          if (v > dominant) {
            dominant = v;              
            dominantKey = k;                               
          }
        });
        if (colorType === 'hex')
          dominantPalettes.push(rgbToHex(palettes[dominantKey]));
        else
          dominantPalettes.push(palettes[dominantKey]);
          
        palettes.splice(dominantKey, 1);            
        occurrences.splice(dominantKey, 1);
        distinctCount--;
      }
      return dominantPalettes;
    }        

    function getPaletteOccurrences(palettes) {
      let paletteList = [], occurrenceList = [], previousPalette;
      palettes.sort();
      palettes.forEach((palette, key) => {
        if (palette.toString() !== previousPalette) {
          paletteList.push(palette);
          occurrenceList.push(1);
        } else {
          occurrenceList[occurrenceList.length-1]++;
        }
        previousPalette = palettes[key].toString();
      });
      return [paletteList, occurrenceList];
    }

    const interval = setInterval(() => {
      var img = document.getElementById('__colorPickerCanvasImage');
      if (img.src.length !== 0) {
        fetchColorFromCanvas();
        clearInterval(interval);
      }
    },10);        

    </script>
    <body>
      <img src='data:image/jpeg;base64,' 
        id='__colorPickerCanvasImage' onload='fetchColorFromCanvas()'/>
    </body>
    </html>
  ",
        }
      }
    />
  </View>
  <View
    fifth={true}
    style={
      Object {
        "backgroundColor": "#ffffff",
        "flex": 1,
        "zIndex": 3,
      }
    }
  >
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      ListFooterComponent={[Function]}
      data={
        Array [
          Object {
            "data": "An Address",
            "label": "Address 1",
          },
          Object {
            "data": "An Address 2",
            "label": "Address 2",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            doubleVerticalSpace={true}
            fifth={true}
            horizontalSpace={true}
            row={true}
            style={
              Object {
                "backgroundColor": "#ffffff",
                "flexDirection": "row",
                "paddingHorizontal": 15,
                "paddingVertical": 16,
              }
            }
          >
            <View
              fifth={true}
              right={true}
              style={
                Object {
                  "alignItems": "flex-end",
                  "backgroundColor": "#ffffff",
                  "flex": 4,
                  "paddingRight": 15,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "fontSize": 12,
                    },
                    Object {
                      "fontFamily": "SF Pro Display",
                    },
                    Object {
                      "backgroundColor": "#f0f0f0",
                      "color": "#333333",
                    },
                    Object {
                      "fontWeight": "600",
                    },
                    null,
                    Object {
                      "backgroundColor": "transparent",
                    },
                    Object {
                      "lineHeight": 19,
                    },
                  ]
                }
              >
                ADDRESS 1
              </Text>
            </View>
            <View
              fifth={true}
              left={true}
              style={
                Object {
                  "alignItems": "flex-start",
                  "backgroundColor": "#ffffff",
                  "flex": 6,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "fontSize": 15,
                    },
                    Object {
                      "fontFamily": "SF Pro Display",
                    },
                    Object {
                      "backgroundColor": "#f0f0f0",
                      "color": "#333333",
                    },
                    Object {
                      "fontWeight": "600",
                    },
                    null,
                    Object {
                      "backgroundColor": "transparent",
                    },
                  ]
                }
              >
                An Address
              </Text>
            </View>
          </View>
          <View
            style={
              Object {
                "backgroundColor": "#f0f0f0",
                "height": 2,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            doubleVerticalSpace={true}
            fifth={true}
            horizontalSpace={true}
            row={true}
            style={
              Object {
                "backgroundColor": "#ffffff",
                "flexDirection": "row",
                "paddingHorizontal": 15,
                "paddingVertical": 16,
              }
            }
          >
            <View
              fifth={true}
              right={true}
              style={
                Object {
                  "alignItems": "flex-end",
                  "backgroundColor": "#ffffff",
                  "flex": 4,
                  "paddingRight": 15,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "fontSize": 12,
                    },
                    Object {
                      "fontFamily": "SF Pro Display",
                    },
                    Object {
                      "backgroundColor": "#f0f0f0",
                      "color": "#333333",
                    },
                    Object {
                      "fontWeight": "600",
                    },
                    null,
                    Object {
                      "backgroundColor": "transparent",
                    },
                    Object {
                      "lineHeight": 19,
                    },
                  ]
                }
              >
                ADDRESS 2
              </Text>
            </View>
            <View
              fifth={true}
              left={true}
              style={
                Object {
                  "alignItems": "flex-start",
                  "backgroundColor": "#ffffff",
                  "flex": 6,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "fontSize": 15,
                    },
                    Object {
                      "fontFamily": "SF Pro Display",
                    },
                    Object {
                      "backgroundColor": "#f0f0f0",
                      "color": "#333333",
                    },
                    Object {
                      "fontWeight": "600",
                    },
                    null,
                    Object {
                      "backgroundColor": "transparent",
                    },
                  ]
                }
              >
                An Address 2
              </Text>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "backgroundColor": "#f0f0f0",
                "height": 2,
              }
            }
          />
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View>
    <View
      row={true}
      style={
        Object {
          "flexDirection": "row",
        }
      }
    >
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          style={Object {}}
        >
          <View
            style={
              Array [
                Object {
                  "marginLeft": 15,
                  "marginRight": 15,
                },
                Object {
                  "shadowColor": "rgba(0,0,0, .4)",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 1,
                  },
                  "shadowOpacity": 1,
                  "shadowRadius": 1,
                },
                Object {
                  "marginLeft": 0,
                  "marginRight": 0,
                },
                undefined,
              ]
            }
          >
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  undefined,
                ]
              }
              testID="claim-offer-footer-deny"
              tvParallaxProperties={undefined}
            >
              <View
                pointerEvents="box-only"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#9E9E9E",
                      "flexDirection": "row",
                      "justifyContent": "center",
                      "padding": 19,
                    },
                    Object {
                      "backgroundColor": "#8F0CE8",
                    },
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    Object {
                      "backgroundColor": "rgba(119, 119, 119, 0.6)",
                    },
                    undefined,
                    Object {
                      "padding": 12,
                    },
                    undefined,
                    undefined,
                    undefined,
                    Array [
                      Object {
                        "paddingVertical": 17,
                      },
                    ],
                    undefined,
                    undefined,
                  ]
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Array [
                      Object {},
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      Array [
                        Object {
                          "color": "white",
                          "fontSize": 16,
                        },
                        Object {
                          "color": "#ffffff",
                        },
                        Object {
                          "fontSize": 14,
                        },
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                      ],
                    ]
                  }
                >
                  Ignore
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          style={Object {}}
        >
          <View
            style={
              Array [
                Object {
                  "marginLeft": 15,
                  "marginRight": 15,
                },
                Object {
                  "shadowColor": "rgba(0,0,0, .4)",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 1,
                  },
                  "shadowOpacity": 1,
                  "shadowRadius": 1,
                },
                Object {
                  "marginLeft": 0,
                  "marginRight": 0,
                },
                undefined,
              ]
            }
          >
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  undefined,
                ]
              }
              testID="claim-offer-footer-accept"
              tvParallaxProperties={undefined}
            >
              <View
                pointerEvents="box-only"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#9E9E9E",
                      "flexDirection": "row",
                      "justifyContent": "center",
                      "padding": 19,
                    },
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    Object {
                      "backgroundColor": "rgba(119, 119, 119, 1.0)",
                    },
                    undefined,
                    Object {
                      "padding": 12,
                    },
                    undefined,
                    undefined,
                    undefined,
                    Array [
                      Object {
                        "paddingVertical": 17,
                      },
                    ],
                    false,
                    false,
                  ]
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Array [
                      Object {},
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      Array [
                        Object {
                          "color": "white",
                          "fontSize": 16,
                        },
                        Object {
                          "color": "#ffffff",
                        },
                        Object {
                          "fontSize": 14,
                        },
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        false,
                      ],
                    ]
                  }
                >
                  Accept
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
    <WebView
      javaScriptEnabled={true}
      onMessage={[Function]}
      source={
        Object {
          "html": "
    <!DOCTYPE html>
    <html>
    <script>
    function fetchColorFromCanvas() {
      const options = {
        imageElement: document.getElementById(\\"__colorPickerCanvasImage\\")
      }
      var rgba = getColorPalettes(options);
      var message = {\\"message\\":'rgbValues',\\"payload\\":rgba};
      window.postMessage(JSON.stringify(message));
    }

    function getColorPalettes({imageElement, 
        count=3, 
        defaultPalette=[0, 0, 0, 1], 
        paletteType='dominant', 
        colorType='rgba'}
      ) {       
      const canvas = document.createElement('canvas');
      const	canvasContext = canvas.getContext && canvas.getContext('2d');

      if (!canvasContext) return defaultPalette;
      
      let imageWidth = canvas.width = imageElement.naturalWidth 
        || imageElement.offsetWidth 
        || imageElement.width;                

      const imageHeight = canvas.height = imageElement.naturalHeight 
        || imageElement.offsetHeight 
        || imageElement.height;                   

      canvasContext.drawImage(imageElement, 0, 0);
      if (paletteType === 'average')
        return getAveragePalette({imageWidth, imageHeight, canvasContext, colorType});
      else
        return getDominantPalettes(getAllPalettes(imageWidth, imageHeight, canvasContext), count, colorType);
    }

    function getAveragePalette({imageWidth, imageHeight, canvasContext, colorType = 'rgb'}) {
      const blockSize = 5
      let i = -4;
      let rgb = {r:0,g:0,b:0,a:1};
      let count = 0;
      
      try {
        data = canvasContext.getImageData(0, 0, imageWidth, imageHeight);
      } catch(e) {
        console.log(e);
      }
    
      while ((i += blockSize * 4) < data.data.length) {
        ++count;
        rgb.r += data.data[i];
        rgb.g += data.data[i+1];
        rgb.b += data.data[i+2];
      }
      rgb.r = ~~(rgb.r/count);
      rgb.g = ~~(rgb.g/count);
      rgb.b = ~~(rgb.b/count);
      if (colorType === 'hex')
        return [[rgbToHex([rgb.r, rgb.g, rgb.b])]]
      else
        return [[rgb.r, rgb.g, rgb.b, rgb.a]];
    }

    function rgbToHex(rgba) {
      let hexColor = '#';
      rgba.slice(0, 3).forEach(c => {
        let hex = c.toString(16);
        hexColor += hex.length == 1 ? \\"0\\" + hex : hex;  
      });
      return hexColor
    }

    function getAllPalettes(width, height, context) {
      let distinctPalettes = [];        
      for (var i=0; i<=height; i++) { 
        for (var j=0; j<=width; j++) { 
          try {
            data = context.getImageData(i, j, 1, 1);
            if (data.data.toString().trim() != \\"0,0,0,0\\") {
              distinctPalettes.push(data.data);
            }
          } catch(e) {
            console.log(e);
          }
        }
      }  
      return distinctPalettes;
    }

    function getDominantPalettes(allPalettes, distinctCount, colorType = 'rgb') {
      const combinations = getPaletteOccurrences(allPalettes);
      let palettes = combinations[0];
      let occurrences = combinations[1];
      const dominantPalettes = [];

      while (distinctCount) {               
        let dominant = 0, dominantKey = 0;  
        occurrences.forEach((v, k) => {           
          if (v > dominant) {
            dominant = v;              
            dominantKey = k;                               
          }
        });
        if (colorType === 'hex')
          dominantPalettes.push(rgbToHex(palettes[dominantKey]));
        else
          dominantPalettes.push(palettes[dominantKey]);
          
        palettes.splice(dominantKey, 1);            
        occurrences.splice(dominantKey, 1);
        distinctCount--;
      }
      return dominantPalettes;
    }        

    function getPaletteOccurrences(palettes) {
      let paletteList = [], occurrenceList = [], previousPalette;
      palettes.sort();
      palettes.forEach((palette, key) => {
        if (palette.toString() !== previousPalette) {
          paletteList.push(palette);
          occurrenceList.push(1);
        } else {
          occurrenceList[occurrenceList.length-1]++;
        }
        previousPalette = palettes[key].toString();
      });
      return [paletteList, occurrenceList];
    }

    const interval = setInterval(() => {
      var img = document.getElementById('__colorPickerCanvasImage');
      if (img.src.length !== 0) {
        fetchColorFromCanvas();
        clearInterval(interval);
      }
    },10);        

    </script>
    <body>
      <img src='data:image/jpeg;base64,' 
        id='__colorPickerCanvasImage' onload='fetchColorFromCanvas()'/>
    </body>
    </html>
  ",
        }
      }
    />
  </View>
  <Modal
    backdropColor="#f0f0f0"
    backdropOpacity={1}
    isVisible={false}
  >
    <View
      fifth={true}
      shadow={true}
      style={
        Object {
          "backgroundColor": "#ffffff",
          "marginHorizontal": 10,
          "shadowColor": "rgba(0, 0, 0, 0.2)",
          "shadowOffset": Object {
            "height": 10,
            "width": 0,
          },
          "shadowOpacity": 1,
          "shadowRadius": 30,
        }
      }
    >
      <View
        spaceBetween={true}
        style={
          Object {
            "borderBottomColor": "#3f3f3f",
            "borderBottomWidth": 0.2,
            "justifyContent": "space-between",
            "paddingVertical": 10,
          }
        }
      >
        <View
          row={true}
          spaceBetween={true}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "space-between",
              "marginHorizontal": 20,
              "marginVertical": 10,
            }
          }
          testID="claim-request-text-avatars-container"
          vCenter={true}
        >
          <View
            imageShadow="imageShadow"
            style={
              Object {
                "borderRadius": 38,
                "shadowColor": "rgba(0, 0, 0, 0.25)",
                "shadowOffset": Object {
                  "height": 3,
                  "width": 0,
                },
                "shadowOpacity": 1,
                "shadowRadius": 8,
              }
            }
            testID="claim-request-text-avatars-invitee"
          >
            <Image
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hitSlop={undefined}
              nativeID={undefined}
              onError={undefined}
              onLayout={undefined}
              onLoad={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={1}
              style={
                Array [
                  Object {
                    "height": 76,
                    "width": 76,
                  },
                  Object {
                    "borderRadius": 38,
                  },
                ]
              }
              testID={undefined}
            />
          </View>
          <Image
            source={1}
            style={
              Array [
                Object {
                  "height": 22,
                  "width": 30,
                },
                null,
              ]
            }
            testID="claim-request-check-mark"
          />
          <View
            imageShadow="imageShadow"
            style={
              Object {
                "borderRadius": 38,
                "shadowColor": "rgba(0, 0, 0, 0.25)",
                "shadowOffset": Object {
                  "height": 3,
                  "width": 0,
                },
                "shadowOpacity": 1,
                "shadowRadius": 8,
              }
            }
            testID="claim-request-text-avatars-inviter"
          >
            <Image
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              hitSlop={undefined}
              nativeID={undefined}
              onError={undefined}
              onLayout={undefined}
              onLoad={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "uri": "http://testissuer.com/logoUrl.png",
                }
              }
              style={
                Array [
                  Object {
                    "height": 76,
                    "width": 76,
                  },
                  Object {
                    "borderRadius": 38,
                  },
                ]
              }
              testID={undefined}
            />
          </View>
        </View>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "fontSize": 17,
              },
              Object {
                "fontFamily": "SF Pro Display",
              },
              Object {
                "backgroundColor": "#f0f0f0",
                "color": "#777777",
              },
              null,
              Object {
                "textAlign": "center",
              },
              Object {
                "backgroundColor": "transparent",
              },
              Object {
                "marginBottom": 5,
                "paddingTop": 10,
              },
            ]
          }
          testID="claim-request-message"
        >
          You accepted
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "fontSize": 17,
              },
              Object {
                "fontFamily": "SF Pro Display",
              },
              Object {
                "backgroundColor": "#f0f0f0",
                "color": "#777777",
              },
              Object {
                "fontWeight": "bold",
              },
              Object {
                "textAlign": "center",
              },
              Object {
                "backgroundColor": "transparent",
              },
              Object {
                "marginBottom": 5,
                "paddingTop": 10,
              },
            ]
          }
          testID="claim-request-message"
        >
          Home Address
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "fontSize": 17,
              },
              Object {
                "fontFamily": "SF Pro Display",
              },
              Object {
                "backgroundColor": "#f0f0f0",
                "color": "#777777",
              },
              null,
              Object {
                "textAlign": "center",
              },
              Object {
                "backgroundColor": "transparent",
              },
              Object {
                "marginBottom": 5,
                "paddingTop": 10,
              },
            ]
          }
          testID="claim-request-message"
        >
          from
           
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "fontSize": 17,
              },
              Object {
                "fontFamily": "SF Pro Display",
              },
              Object {
                "backgroundColor": "#f0f0f0",
                "color": "#777777",
              },
              Object {
                "fontWeight": "bold",
              },
              Object {
                "textAlign": "center",
              },
              Object {
                "backgroundColor": "transparent",
              },
              Object {
                "marginBottom": 5,
                "paddingTop": 10,
              },
            ]
          }
          testID="claim-request-message"
        >
          Test Issuer
        </Text>
      </View>
      <View
        style={
          Array [
            Object {
              "marginLeft": 15,
              "marginRight": 15,
            },
            undefined,
            Object {
              "marginLeft": 0,
              "marginRight": 0,
            },
            undefined,
          ]
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel="Continue to see your new connection"
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ]
          }
          testID="claim-request-success-continue"
          tvParallaxProperties={undefined}
        >
          <View
            pointerEvents="box-only"
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#9E9E9E",
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "padding": 19,
                },
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                Object {
                  "backgroundColor": "#ffffff",
                },
                undefined,
                Object {
                  "padding": 12,
                },
                undefined,
                undefined,
                undefined,
                Array [
                  null,
                ],
                undefined,
                undefined,
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {},
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  Array [
                    Object {
                      "color": "white",
                      "fontSize": 16,
                    },
                    Object {
                      "color": "#85bf43",
                    },
                    Object {
                      "fontSize": 14,
                    },
                    undefined,
                    Object {
                      "fontWeight": "bold",
                    },
                    undefined,
                    undefined,
                    undefined,
                  ],
                ]
              }
            >
              Continue
            </Text>
          </View>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;
