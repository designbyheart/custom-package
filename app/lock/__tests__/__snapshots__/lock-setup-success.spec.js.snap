// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LockSetupSuccess /> should display Loading while fetching the invitation 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#f0f0f0",
      "flex": 1,
    }
  }
  tertiary={true}
>
  <View
    center={true}
    clearBg={true}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "flex": 1,
        "justifyContent": "center",
        "paddingHorizontal": 20,
      }
    }
  >
    <View
      clearBg={true}
      extraLarge={true}
      resizeMode="cover"
      src={1}
      style={
        Object {
          "backgroundColor": "transparent",
        }
      }
      testID="lock-success-lock-logo"
    >
      <Image
        resizeMode="cover"
        source={1}
        style={
          Array [
            Object {
              "height": 80,
              "width": 80,
            },
            null,
          ]
        }
        testID="lock-success-lock-logo"
      />
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 20,
          },
          Object {
            "fontFamily": "SF Pro Display",
          },
          Object {
            "backgroundColor": "#f0f0f0",
            "color": "#777777",
          },
          Object {
            "fontWeight": "800",
          },
          Object {
            "textAlign": "center",
          },
          null,
          Object {
            "paddingVertical": 40,
          },
        ]
      }
    >
      Unlocking the App, please wait...
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 15,
          },
          Object {
            "fontFamily": "SF Pro Display",
          },
          Object {
            "backgroundColor": "#f0f0f0",
            "color": "#777777",
          },
          Object {
            "fontWeight": "800",
          },
          Object {
            "textAlign": "center",
          },
          null,
          Object {
            "paddingVertical": 40,
          },
        ]
      }
    >
       
    </Text>
  </View>
  <View
    style={Object {}}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          undefined,
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "#9E9E9E",
              "flexDirection": "row",
              "justifyContent": "center",
              "marginLeft": 15,
              "marginRight": 15,
              "padding": 19,
            },
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "backgroundColor": "#85bf43",
            },
            undefined,
            Object {
              "shadowColor": "rgba(0,0,0, .4)",
              "shadowOffset": Object {
                "height": 1,
                "width": 1,
              },
              "shadowOpacity": 1,
              "shadowRadius": 1,
            },
            Object {
              "padding": 12,
            },
            Array [
              Object {
                "marginLeft": 0,
                "marginRight": 0,
              },
              Object {
                "paddingVertical": 17,
              },
              Object {
                "backgroundColor": "#ffffff",
                "opacity": 0.2,
              },
            ],
            Object {
              "backgroundColor": "#dadee0",
            },
            undefined,
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {},
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              Array [
                Object {
                  "color": "white",
                  "fontSize": 16,
                },
                Object {
                  "color": "#ffffff",
                },
                Object {
                  "fontSize": 14,
                },
                undefined,
                undefined,
                Object {
                  "fontWeight": "600",
                },
                undefined,
              ],
            ]
          }
        >
          Close
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`<LockSetupSuccess /> should render Lock setup success Screen 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#f0f0f0",
      "flex": 1,
    }
  }
  tertiary={true}
>
  <View
    center={true}
    clearBg={true}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "flex": 1,
        "justifyContent": "center",
        "paddingHorizontal": 20,
      }
    }
  >
    <View
      clearBg={true}
      extraLarge={true}
      resizeMode="cover"
      src={1}
      style={
        Object {
          "backgroundColor": "transparent",
        }
      }
      testID="lock-success-lock-logo"
    >
      <Image
        resizeMode="cover"
        source={1}
        style={
          Array [
            Object {
              "height": 80,
              "width": 80,
            },
            null,
          ]
        }
        testID="lock-success-lock-logo"
      />
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 20,
          },
          Object {
            "fontFamily": "SF Pro Display",
          },
          Object {
            "backgroundColor": "#f0f0f0",
            "color": "#777777",
          },
          Object {
            "fontWeight": "800",
          },
          Object {
            "textAlign": "center",
          },
          null,
          Object {
            "paddingVertical": 40,
          },
        ]
      }
    >
      Your connect.me app is now secured
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 15,
          },
          Object {
            "fontFamily": "SF Pro Display",
          },
          Object {
            "backgroundColor": "#f0f0f0",
            "color": "#777777",
          },
          Object {
            "fontWeight": "800",
          },
          Object {
            "textAlign": "center",
          },
          null,
          Object {
            "paddingVertical": 40,
          },
        ]
      }
    >
       
    </Text>
  </View>
  <View
    style={Object {}}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          undefined,
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "#9E9E9E",
              "flexDirection": "row",
              "justifyContent": "center",
              "marginLeft": 15,
              "marginRight": 15,
              "padding": 19,
            },
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "backgroundColor": "#85bf43",
            },
            undefined,
            Object {
              "shadowColor": "rgba(0,0,0, .4)",
              "shadowOffset": Object {
                "height": 1,
                "width": 1,
              },
              "shadowOpacity": 1,
              "shadowRadius": 1,
            },
            Object {
              "padding": 12,
            },
            Array [
              Object {
                "marginLeft": 0,
                "marginRight": 0,
              },
              Object {
                "paddingVertical": 17,
              },
              null,
            ],
            false,
            false,
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {},
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              Array [
                Object {
                  "color": "white",
                  "fontSize": 16,
                },
                Object {
                  "color": "#ffffff",
                },
                Object {
                  "fontSize": 14,
                },
                undefined,
                undefined,
                Object {
                  "fontWeight": "600",
                },
                undefined,
              ],
            ]
          }
        >
          Close
        </Text>
      </View>
    </View>
  </View>
</View>
`;
