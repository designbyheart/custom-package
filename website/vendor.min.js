// polyfill for promise
!(function(e) {
  function n() {}
  function t(e, n) {
    return function() {
      e.apply(n, arguments)
    }
  }
  function o(e) {
    if ('object' != typeof this)
      throw new TypeError('Promises must be constructed via new')
    if ('function' != typeof e) throw new TypeError('not a function')
    ;(this._state = 0), (this._handled = !1), (this._value = void 0), (this._deferreds = []), s(
      e,
      this
    )
  }
  function i(e, n) {
    for (; 3 === e._state; )
      e = e._value
    return 0 === e._state
      ? void e._deferreds.push(n)
      : ((e._handled = !0), void o._immediateFn(function() {
          var t = 1 === e._state ? n.onFulfilled : n.onRejected
          if (null === t)
            return void (1 === e._state ? r : u)(n.promise, e._value)
          var o
          try {
            o = t(e._value)
          } catch (i) {
            return void u(n.promise, i)
          }
          r(n.promise, o)
        }))
  }
  function r(e, n) {
    try {
      if (n === e)
        throw new TypeError('A promise cannot be resolved with itself.')
      if (n && ('object' == typeof n || 'function' == typeof n)) {
        var i = n.then
        if (n instanceof o) return (e._state = 3), (e._value = n), void f(e)
        if ('function' == typeof i) return void s(t(i, n), e)
      }
      ;(e._state = 1), (e._value = n), f(e)
    } catch (r) {
      u(e, r)
    }
  }
  function u(e, n) {
    ;(e._state = 2), (e._value = n), f(e)
  }
  function f(e) {
    2 === e._state &&
      0 === e._deferreds.length &&
      o._immediateFn(function() {
        e._handled || o._unhandledRejectionFn(e._value)
      })
    for (var n = 0, t = e._deferreds.length; n < t; n++)
      i(e, e._deferreds[n])
    e._deferreds = null
  }
  function c(e, n, t) {
    ;(this.onFulfilled = 'function' == typeof e
      ? e
      : null), (this.onRejected = 'function' == typeof n
      ? n
      : null), (this.promise = t)
  }
  function s(e, n) {
    var t = !1
    try {
      e(
        function(e) {
          t || ((t = !0), r(n, e))
        },
        function(e) {
          t || ((t = !0), u(n, e))
        }
      )
    } catch (o) {
      if (t) return
      ;(t = !0), u(n, o)
    }
  }
  var a = setTimeout
  ;(o.prototype['catch'] = function(e) {
    return this.then(null, e)
  }), (o.prototype.then = function(e, t) {
    var o = new this.constructor(n)
    return i(this, new c(e, t, o)), o
  }), (o.all = function(e) {
    var n = Array.prototype.slice.call(e)
    return new o(function(e, t) {
      function o(r, u) {
        try {
          if (u && ('object' == typeof u || 'function' == typeof u)) {
            var f = u.then
            if ('function' == typeof f)
              return void f.call(
                u,
                function(e) {
                  o(r, e)
                },
                t
              )
          }
          ;(n[r] = u), 0 === --i && e(n)
        } catch (c) {
          t(c)
        }
      }
      if (0 === n.length) return e([])
      for (var i = n.length, r = 0; r < n.length; r++) o(r, n[r])
    })
  }), (o.resolve = function(e) {
    return e && 'object' == typeof e && e.constructor === o
      ? e
      : new o(function(n) {
          n(e)
        })
  }), (o.reject = function(e) {
    return new o(function(n, t) {
      t(e)
    })
  }), (o.race = function(e) {
    return new o(function(n, t) {
      for (var o = 0, i = e.length; o < i; o++) e[o].then(n, t)
    })
  }), (o._immediateFn =
    ('function' == typeof setImmediate &&
      function(e) {
        setImmediate(e)
      }) ||
    function(e) {
      a(e, 0)
    }), (o._unhandledRejectionFn = function(e) {
    'undefined' != typeof console &&
      console &&
      console.warn('Possible Unhandled Promise Rejection:', e)
  }), (o._setImmediateFn = function(e) {
    o._immediateFn = e
  }), (o._setUnhandledRejectionFn = function(e) {
    o._unhandledRejectionFn = e
  }), 'undefined' != typeof module && module.exports
    ? (module.exports = o)
    : e.Promise || (e.Promise = o)
})(this)

// polyfill for fetch
!(function(t) {
  'use strict'
  function e(t) {
    if (
      ('string' != typeof t &&
        (t = String(t)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))
    )
      throw new TypeError('Invalid character in header field name')
    return t.toLowerCase()
  }
  function r(t) {
    return 'string' != typeof t && (t = String(t)), t
  }
  function o(t) {
    var e = {
      next: function() {
        var e = t.shift()
        return { done: void 0 === e, value: e }
      },
    }
    return m.iterable &&
      (e[Symbol.iterator] = function() {
        return e
      }), e
  }
  function n(t) {
    ;(this.map = {}), t instanceof n
      ? t.forEach(function(t, e) {
          this.append(e, t)
        }, this)
      : Array.isArray(t)
          ? t.forEach(function(t) {
              this.append(t[0], t[1])
            }, this)
          : t &&
              Object.getOwnPropertyNames(t).forEach(function(e) {
                this.append(e, t[e])
              }, this)
  }
  function i(t) {
    if (t.bodyUsed) return Promise.reject(new TypeError('Already read'))
    t.bodyUsed = !0
  }
  function s(t) {
    return new Promise(function(e, r) {
      ;(t.onload = function() {
        e(t.result)
      }), (t.onerror = function() {
        r(t.error)
      })
    })
  }
  function a(t) {
    var e = new FileReader(), r = s(e)
    return e.readAsArrayBuffer(t), r
  }
  function u(t) {
    var e = new FileReader(), r = s(e)
    return e.readAsText(t), r
  }
  function h(t) {
    for (
      var e = new Uint8Array(t), r = new Array(e.length), o = 0;
      o < e.length;
      o++
    )
      r[o] = String.fromCharCode(e[o])
    return r.join('')
  }
  function f(t) {
    if (t.slice) return t.slice(0)
    var e = new Uint8Array(t.byteLength)
    return e.set(new Uint8Array(t)), e.buffer
  }
  function d() {
    return (this.bodyUsed = !1), (this._initBody = function(t) {
      if (((this._bodyInit = t), t))
        if ('string' == typeof t) this._bodyText = t
        else if (m.blob && Blob.prototype.isPrototypeOf(t)) this._bodyBlob = t
        else if (m.formData && FormData.prototype.isPrototypeOf(t))
          this._bodyFormData = t
        else if (m.searchParams && URLSearchParams.prototype.isPrototypeOf(t))
          this._bodyText = t.toString()
        else if (m.arrayBuffer && m.blob && v(t))
          (this._bodyArrayBuffer = f(t.buffer)), (this._bodyInit = new Blob([
            this._bodyArrayBuffer,
          ]))
        else {
          if (
            !m.arrayBuffer ||
            (!ArrayBuffer.prototype.isPrototypeOf(t) && !B(t))
          )
            throw new Error('unsupported BodyInit type')
          this._bodyArrayBuffer = f(t)
        }
      else this._bodyText = ''
      this.headers.get('content-type') ||
        ('string' == typeof t
          ? this.headers.set('content-type', 'text/plain;charset=UTF-8')
          : this._bodyBlob && this._bodyBlob.type
              ? this.headers.set('content-type', this._bodyBlob.type)
              : m.searchParams &&
                  URLSearchParams.prototype.isPrototypeOf(t) &&
                  this.headers.set(
                    'content-type',
                    'application/x-www-form-urlencoded;charset=UTF-8'
                  ))
    }), m.blob &&
      ((this.blob = function() {
        var t = i(this)
        if (t) return t
        if (this._bodyBlob) return Promise.resolve(this._bodyBlob)
        if (this._bodyArrayBuffer)
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        if (this._bodyFormData)
          throw new Error('could not read FormData body as blob')
        return Promise.resolve(new Blob([this._bodyText]))
      }), (this.arrayBuffer = function() {
        return this._bodyArrayBuffer
          ? i(this) || Promise.resolve(this._bodyArrayBuffer)
          : this.blob().then(a)
      })), (this.text = function() {
      var t = i(this)
      if (t) return t
      if (this._bodyBlob) return u(this._bodyBlob)
      if (this._bodyArrayBuffer)
        return Promise.resolve(h(this._bodyArrayBuffer))
      if (this._bodyFormData)
        throw new Error('could not read FormData body as text')
      return Promise.resolve(this._bodyText)
    }), m.formData &&
      (this.formData = function() {
        return this.text().then(p)
      }), (this.json = function() {
      return this.text().then(JSON.parse)
    }), this
  }
  function y(t) {
    var e = t.toUpperCase()
    return _.indexOf(e) > -1 ? e : t
  }
  function l(t, e) {
    var r = (e = e || {}).body
    if (t instanceof l) {
      if (t.bodyUsed) throw new TypeError('Already read')
      ;(this.url = t.url), (this.credentials = t.credentials), e.headers ||
        (this.headers = new n(t.headers)), (this.method =
        t.method), (this.mode = t.mode), r ||
        null == t._bodyInit ||
        ((r = t._bodyInit), (t.bodyUsed = !0))
    } else this.url = String(t)
    if (
      ((this.credentials =
        e.credentials || this.credentials || 'omit'), (!e.headers &&
        this.headers) ||
        (this.headers = new n(e.headers)), (this.method = y(
        e.method || this.method || 'GET'
      )), (this.mode =
        e.mode || this.mode || null), (this.referrer = null), ('GET' ===
        this.method ||
        'HEAD' === this.method) &&
        r)
    )
      throw new TypeError('Body not allowed for GET or HEAD requests')
    this._initBody(r)
  }
  function p(t) {
    var e = new FormData()
    return t.trim().split('&').forEach(function(t) {
      if (t) {
        var r = t.split('='),
          o = r.shift().replace(/\+/g, ' '),
          n = r.join('=').replace(/\+/g, ' ')
        e.append(decodeURIComponent(o), decodeURIComponent(n))
      }
    }), e
  }
  function c(t) {
    var e = new n()
    return t.split(/\r?\n/).forEach(function(t) {
      var r = t.split(':'), o = r.shift().trim()
      if (o) {
        var n = r.join(':').trim()
        e.append(o, n)
      }
    }), e
  }
  function b(t, e) {
    e || (e = {}), (this.type = 'default'), (this.status = 'status' in e
      ? e.status
      : 200), (this.ok =
      this.status >= 200 &&
      this.status < 300), (this.statusText = 'statusText' in e
      ? e.statusText
      : 'OK'), (this.headers = new n(e.headers)), (this.url =
      e.url || ''), this._initBody(t)
  }
  if (!t.fetch) {
    var m = {
      searchParams: 'URLSearchParams' in t,
      iterable: 'Symbol' in t && 'iterator' in Symbol,
      blob: 'FileReader' in t &&
        'Blob' in t &&
        (function() {
          try {
            return new Blob(), !0
          } catch (t) {
            return !1
          }
        })(),
      formData: 'FormData' in t,
      arrayBuffer: 'ArrayBuffer' in t,
    }
    if (m.arrayBuffer)
      var w = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]',
      ],
        v = function(t) {
          return t && DataView.prototype.isPrototypeOf(t)
        },
        B =
          ArrayBuffer.isView ||
          function(t) {
            return t && w.indexOf(Object.prototype.toString.call(t)) > -1
          }
    ;(n.prototype.append = function(t, o) {
      ;(t = e(t)), (o = r(o))
      var n = this.map[t]
      this.map[t] = n ? n + ',' + o : o
    }), (n.prototype.delete = function(t) {
      delete this.map[e(t)]
    }), (n.prototype.get = function(t) {
      return (t = e(t)), this.has(t) ? this.map[t] : null
    }), (n.prototype.has = function(t) {
      return this.map.hasOwnProperty(e(t))
    }), (n.prototype.set = function(t, o) {
      this.map[e(t)] = r(o)
    }), (n.prototype.forEach = function(t, e) {
      for (var r in this.map)
        this.map.hasOwnProperty(r) && t.call(e, this.map[r], r, this)
    }), (n.prototype.keys = function() {
      var t = []
      return this.forEach(function(e, r) {
        t.push(r)
      }), o(t)
    }), (n.prototype.values = function() {
      var t = []
      return this.forEach(function(e) {
        t.push(e)
      }), o(t)
    }), (n.prototype.entries = function() {
      var t = []
      return this.forEach(function(e, r) {
        t.push([r, e])
      }), o(t)
    }), m.iterable && (n.prototype[Symbol.iterator] = n.prototype.entries)
    var _ = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
    ;(l.prototype.clone = function() {
      return new l(this, { body: this._bodyInit })
    }), d.call(l.prototype), d.call(
      b.prototype
    ), (b.prototype.clone = function() {
      return new b(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new n(this.headers),
        url: this.url,
      })
    }), (b.error = function() {
      var t = new b(null, { status: 0, statusText: '' })
      return (t.type = 'error'), t
    })
    var A = [301, 302, 303, 307, 308]
    ;(b.redirect = function(t, e) {
      if (-1 === A.indexOf(e)) throw new RangeError('Invalid status code')
      return new b(null, { status: e, headers: { location: t } })
    }), (t.Headers = n), (t.Request = l), (t.Response = b), (t.fetch = function(
      t,
      e
    ) {
      return new Promise(function(r, o) {
        var n = new l(t, e), i = new XMLHttpRequest()
        ;(i.onload = function() {
          var t = {
            status: i.status,
            statusText: i.statusText,
            headers: c(i.getAllResponseHeaders() || ''),
          }
          t.url = 'responseURL' in i
            ? i.responseURL
            : t.headers.get('X-Request-URL')
          var e = 'response' in i ? i.response : i.responseText
          r(new b(e, t))
        }), (i.onerror = function() {
          o(new TypeError('Network request failed'))
        }), (i.ontimeout = function() {
          o(new TypeError('Network request failed'))
        }), i.open(n.method, n.url, !0), 'include' === n.credentials && (i.withCredentials = !0), 'responseType' in i && m.blob && (i.responseType = 'blob'), n.headers.forEach(
          function(t, e) {
            i.setRequestHeader(e, t)
          }
        ), i.send(void 0 === n._bodyInit ? null : n._bodyInit)
      })
    }), (t.fetch.polyfill = !0)
  }
})('undefined' != typeof self ? self : this)

// Generate signature and verkey
!(function(r) {
  'use strict'
  function n(r, n) {
    return (r << n) | (r >>> (32 - n))
  }
  function e(r, n) {
    var e = 255 & r[n + 3]
    return (e = (e << 8) | (255 & r[n + 2])), (e =
      (e << 8) | (255 & r[n + 1])), (e << 8) | (255 & r[n + 0])
  }
  function t(r, n) {
    var e = (r[n] << 24) | (r[n + 1] << 16) | (r[n + 2] << 8) | r[n + 3],
      t = (r[n + 4] << 24) | (r[n + 5] << 16) | (r[n + 6] << 8) | r[n + 7]
    return new sr(e, t)
  }
  function o(r, n, e) {
    var t
    for (t = 0; t < 4; t++)
      (r[n + t] = 255 & e), (e >>>= 8)
  }
  function i(r, n, e) {
    ;(r[n] = (e.hi >> 24) & 255), (r[n + 1] = (e.hi >> 16) & 255), (r[n + 2] =
      (e.hi >> 8) & 255), (r[n + 3] = 255 & e.hi), (r[n + 4] =
      (e.lo >> 24) & 255), (r[n + 5] = (e.lo >> 16) & 255), (r[n + 6] =
      (e.lo >> 8) & 255), (r[n + 7] = 255 & e.lo)
  }
  function f(r, n, e, t, o) {
    var i, f = 0
    for (i = 0; i < o; i++)
      f |= r[n + i] ^ e[t + i]
    return (1 & ((f - 1) >>> 8)) - 1
  }
  function a(r, n, e, t) {
    return f(r, n, e, t, 16)
  }
  function u(r, n, e, t) {
    return f(r, n, e, t, 32)
  }
  function c(r, t, i, f, a) {
    var u,
      c,
      w,
      y = new Uint32Array(16),
      l = new Uint32Array(16),
      s = new Uint32Array(16),
      h = new Uint32Array(4)
    for (u = 0; u < 4; u++)
      (l[5 * u] = e(f, 4 * u)), (l[1 + u] = e(i, 4 * u)), (l[6 + u] = e(
        t,
        4 * u
      )), (l[11 + u] = e(i, 16 + 4 * u))
    for (u = 0; u < 16; u++)
      s[u] = l[u]
    for (u = 0; u < 20; u++) {
      for (c = 0; c < 4; c++) {
        for (w = 0; w < 4; w++)
          h[w] = l[(5 * c + 4 * w) % 16]
        for (
          (h[1] ^= n((h[0] + h[3]) | 0, 7)), (h[2] ^= n(
            (h[1] + h[0]) | 0,
            9
          )), (h[3] ^= n((h[2] + h[1]) | 0, 13)), (h[0] ^= n(
            (h[3] + h[2]) | 0,
            18
          )), (w = 0);
          w < 4;
          w++
        )
          y[4 * c + (c + w) % 4] = h[w]
      }
      for (w = 0; w < 16; w++)
        l[w] = y[w]
    }
    if (a) {
      for (u = 0; u < 16; u++)
        l[u] = (l[u] + s[u]) | 0
      for (u = 0; u < 4; u++)
        (l[5 * u] = (l[5 * u] - e(f, 4 * u)) | 0), (l[6 + u] =
          (l[6 + u] - e(t, 4 * u)) | 0)
      for (u = 0; u < 4; u++)
        o(r, 4 * u, l[5 * u]), o(r, 16 + 4 * u, l[6 + u])
    } else for (u = 0; u < 16; u++) o(r, 4 * u, (l[u] + s[u]) | 0)
  }
  function w(r, n, e, t) {
    return c(r, n, e, t, !1), 0
  }
  function y(r, n, e, t) {
    return c(r, n, e, t, !0), 0
  }
  function l(r, n, e, t, o, i, f) {
    var a, u, c = new Uint8Array(16), y = new Uint8Array(64)
    if (!o) return 0
    for (u = 0; u < 16; u++)
      c[u] = 0
    for (u = 0; u < 8; u++)
      c[u] = i[u]
    for (; o >= 64; ) {
      for (w(y, c, f, Br), (u = 0); u < 64; u++)
        r[n + u] = (e ? e[t + u] : 0) ^ y[u]
      for ((a = 1), (u = 8); u < 16; u++)
        (a = (a + (255 & c[u])) | 0), (c[u] = 255 & a), (a >>>= 8)
      ;(o -= 64), (n += 64), e && (t += 64)
    }
    if (o > 0)
      for (w(y, c, f, Br), (u = 0); u < o; u++)
        r[n + u] = (e ? e[t + u] : 0) ^ y[u]
    return 0
  }
  function s(r, n, e, t, o) {
    return l(r, n, null, 0, e, t, o)
  }
  function h(r, n, e, t, o) {
    var i = new Uint8Array(32)
    return y(i, t, o, Br), s(r, n, e, t.subarray(16), i)
  }
  function v(r, n, e, t, o, i, f) {
    var a = new Uint8Array(32)
    return y(a, i, f, Br), l(r, n, e, t, o, i.subarray(16), a)
  }
  function g(r, n) {
    var e, t = 0
    for (e = 0; e < 17; e++)
      (t = (t + ((r[e] + n[e]) | 0)) | 0), (r[e] = 255 & t), (t >>>= 8)
  }
  function b(r, n, e, t, o, i) {
    var f,
      a,
      u,
      c,
      w = new Uint32Array(17),
      y = new Uint32Array(17),
      l = new Uint32Array(17),
      s = new Uint32Array(17),
      h = new Uint32Array(17)
    for (u = 0; u < 17; u++)
      y[u] = l[u] = 0
    for (u = 0; u < 16; u++)
      y[u] = i[u]
    for (
      (y[3] &= 15), (y[4] &= 252), (y[7] &= 15), (y[8] &= 252), (y[11] &= 15), (y[12] &= 252), (y[15] &= 15);
      o > 0;

    ) {
      for (u = 0; u < 17; u++)
        s[u] = 0
      for (u = 0; u < 16 && u < o; ++u)
        s[u] = e[t + u]
      for ((s[u] = 1), (t += u), (o -= u), g(l, s), (a = 0); a < 17; a++)
        for ((w[a] = 0), (u = 0); u < 17; u++)
          w[a] =
            (w[a] + l[u] * (u <= a ? y[a - u] : (320 * y[a + 17 - u]) | 0)) |
            0 |
            0
      for (a = 0; a < 17; a++)
        l[a] = w[a]
      for ((c = 0), (u = 0); u < 16; u++)
        (c = (c + l[u]) | 0), (l[u] = 255 & c), (c >>>= 8)
      for (
        (c = (c + l[16]) | 0), (l[16] = 3 & c), (c =
          (5 * (c >>> 2)) | 0), (u = 0);
        u < 16;
        u++
      )
        (c = (c + l[u]) | 0), (l[u] = 255 & c), (c >>>= 8)
      ;(c = (c + l[16]) | 0), (l[16] = c)
    }
    for (u = 0; u < 17; u++)
      h[u] = l[u]
    for (g(l, Sr), (f = 0 | -(l[16] >>> 7)), (u = 0); u < 17; u++)
      l[u] ^= f & (h[u] ^ l[u])
    for (u = 0; u < 16; u++)
      s[u] = i[u + 16]
    for ((s[16] = 0), g(l, s), (u = 0); u < 16; u++)
      r[n + u] = l[u]
    return 0
  }
  function p(r, n, e, t, o, i) {
    var f = new Uint8Array(16)
    return b(f, 0, e, t, o, i), a(r, n, f, 0)
  }
  function _(r, n, e, t, o) {
    var i
    if (e < 32) return -1
    for (
      v(r, 0, n, 0, e, t, o), b(r, 16, r, 32, e - 32, r), (i = 0);
      i < 16;
      i++
    )
      r[i] = 0
    return 0
  }
  function A(r, n, e, t, o) {
    var i, f = new Uint8Array(32)
    if (e < 32) return -1
    if ((h(f, 0, 32, t, o), 0 !== p(n, 16, n, 32, e - 32, f))) return -1
    for (v(r, 0, n, 0, e, t, o), (i = 0); i < 32; i++)
      r[i] = 0
    return 0
  }
  function U(r, n) {
    var e
    for (e = 0; e < 16; e++)
      r[e] = 0 | n[e]
  }
  function E(r) {
    var n, e
    for (e = 0; e < 16; e++)
      (r[e] += 65536), (n = Math.floor(r[e] / 65536)), (r[
        (e + 1) * (e < 15 ? 1 : 0)
      ] +=
        n - 1 + 37 * (n - 1) * (15 === e ? 1 : 0)), (r[e] -= 65536 * n)
  }
  function x(r, n, e) {
    for (var t, o = ~(e - 1), i = 0; i < 16; i++)
      (t = o & (r[i] ^ n[i])), (r[i] ^= t), (n[i] ^= t)
  }
  function d(r, n) {
    var e, t, o, i = hr(), f = hr()
    for (e = 0; e < 16; e++)
      f[e] = n[e]
    for (E(f), E(f), E(f), (t = 0); t < 2; t++) {
      for ((i[0] = f[0] - 65517), (e = 1); e < 15; e++)
        (i[e] = f[e] - 65535 - ((i[e - 1] >> 16) & 1)), (i[e - 1] &= 65535)
      ;(i[15] = f[15] - 32767 - ((i[14] >> 16) & 1)), (o =
        (i[15] >> 16) & 1), (i[14] &= 65535), x(f, i, 1 - o)
    }
    for (e = 0; e < 16; e++)
      (r[2 * e] = 255 & f[e]), (r[2 * e + 1] = f[e] >> 8)
  }
  function m(r, n) {
    var e = new Uint8Array(32), t = new Uint8Array(32)
    return d(e, r), d(t, n), u(e, 0, t, 0)
  }
  function B(r) {
    var n = new Uint8Array(32)
    return d(n, r), 1 & n[0]
  }
  function S(r, n) {
    var e
    for (e = 0; e < 16; e++)
      r[e] = n[2 * e] + (n[2 * e + 1] << 8)
    r[15] &= 32767
  }
  function K(r, n, e) {
    var t
    for (t = 0; t < 16; t++)
      r[t] = (n[t] + e[t]) | 0
  }
  function Y(r, n, e) {
    var t
    for (t = 0; t < 16; t++)
      r[t] = (n[t] - e[t]) | 0
  }
  function T(r, n, e) {
    var t, o, i = new Float64Array(31)
    for (t = 0; t < 31; t++)
      i[t] = 0
    for (t = 0; t < 16; t++)
      for (o = 0; o < 16; o++)
        i[t + o] += n[t] * e[o]
    for (t = 0; t < 15; t++)
      i[t] += 38 * i[t + 16]
    for (t = 0; t < 16; t++)
      r[t] = i[t]
    E(r), E(r)
  }
  function L(r, n) {
    T(r, n, n)
  }
  function k(r, n) {
    var e, t = hr()
    for (e = 0; e < 16; e++)
      t[e] = n[e]
    for (e = 253; e >= 0; e--)
      L(t, t), 2 !== e && 4 !== e && T(t, t, n)
    for (e = 0; e < 16; e++)
      r[e] = t[e]
  }
  function z(r, n) {
    var e, t = hr()
    for (e = 0; e < 16; e++)
      t[e] = n[e]
    for (e = 250; e >= 0; e--)
      L(t, t), 1 !== e && T(t, t, n)
    for (e = 0; e < 16; e++)
      r[e] = t[e]
  }
  function R(r, n, e) {
    var t,
      o,
      i = new Uint8Array(32),
      f = new Float64Array(80),
      a = hr(),
      u = hr(),
      c = hr(),
      w = hr(),
      y = hr(),
      l = hr()
    for (o = 0; o < 31; o++)
      i[o] = n[o]
    for (
      (i[31] = (127 & n[31]) | 64), (i[0] &= 248), S(f, e), (o = 0);
      o < 16;
      o++
    )
      (u[o] = f[o]), (w[o] = a[o] = c[o] = 0)
    for ((a[0] = w[0] = 1), (o = 254); o >= 0; --o)
      (t = (i[o >>> 3] >>> (7 & o)) & 1), x(a, u, t), x(c, w, t), K(y, a, c), Y(
        a,
        a,
        c
      ), K(c, u, w), Y(u, u, w), L(w, y), L(l, a), T(a, c, a), T(c, u, y), K(
        y,
        a,
        c
      ), Y(a, a, c), L(u, a), Y(c, w, l), T(a, c, Ar), K(a, a, w), T(
        c,
        c,
        a
      ), T(a, w, l), T(w, u, f), L(u, y), x(a, u, t), x(c, w, t)
    for (o = 0; o < 16; o++)
      (f[o + 16] = a[o]), (f[o + 32] = c[o]), (f[o + 48] = u[o]), (f[o + 64] =
        w[o])
    var s = f.subarray(32), h = f.subarray(16)
    return k(s, s), T(h, h, s), d(r, h), 0
  }
  function P(r, n) {
    return R(r, n, br)
  }
  function N(r, n) {
    return vr(n, 32), P(r, n)
  }
  function O(r, n, e) {
    var t = new Uint8Array(32)
    return R(t, e, n), y(r, gr, t, Br)
  }
  function C(r, n, e, t, o, i) {
    var f = new Uint8Array(32)
    return O(f, o, i), Kr(r, n, e, t, f)
  }
  function F(r, n, e, t, o, i) {
    var f = new Uint8Array(32)
    return O(f, o, i), Yr(r, n, e, t, f)
  }
  function M() {
    var r, n, e, t = 0, o = 0, i = 0, f = 0, a = 65535
    for (e = 0; e < arguments.length; e++)
      (r = arguments[e].lo), (n = arguments[e].hi), (t += r & a), (o +=
        r >>> 16), (i += n & a), (f += n >>> 16)
    return (o += t >>> 16), (i += o >>> 16), (f += i >>> 16), new sr(
      (i & a) | (f << 16),
      (t & a) | (o << 16)
    )
  }
  function G(r, n) {
    return new sr(r.hi >>> n, (r.lo >>> n) | (r.hi << (32 - n)))
  }
  function Z() {
    var r, n = 0, e = 0
    for (r = 0; r < arguments.length; r++)
      (n ^= arguments[r].lo), (e ^= arguments[r].hi)
    return new sr(e, n)
  }
  function q(r, n) {
    var e, t, o = 32 - n
    return n < 32
      ? ((e = (r.hi >>> n) | (r.lo << o)), (t = (r.lo >>> n) | (r.hi << o)))
      : n < 64 &&
          ((e = (r.lo >>> n) | (r.hi << o)), (t =
            (r.hi >>> n) | (r.lo << o))), new sr(e, t)
  }
  function I(r, n, e) {
    var t = (r.hi & n.hi) ^ (~r.hi & e.hi), o = (r.lo & n.lo) ^ (~r.lo & e.lo)
    return new sr(t, o)
  }
  function V(r, n, e) {
    var t = (r.hi & n.hi) ^ (r.hi & e.hi) ^ (n.hi & e.hi),
      o = (r.lo & n.lo) ^ (r.lo & e.lo) ^ (n.lo & e.lo)
    return new sr(t, o)
  }
  function X(r) {
    return Z(q(r, 28), q(r, 34), q(r, 39))
  }
  function D(r) {
    return Z(q(r, 14), q(r, 18), q(r, 41))
  }
  function j(r) {
    return Z(q(r, 1), q(r, 8), G(r, 7))
  }
  function H(r) {
    return Z(q(r, 19), q(r, 61), G(r, 6))
  }
  function J(r, n, e) {
    var o, f, a, u = [], c = [], w = [], y = []
    for (f = 0; f < 8; f++)
      u[f] = w[f] = t(r, 8 * f)
    for (var l = 0; e >= 128; ) {
      for (f = 0; f < 16; f++)
        y[f] = t(n, 8 * f + l)
      for (f = 0; f < 80; f++) {
        for (a = 0; a < 8; a++)
          c[a] = w[a]
        for (
          (o = M(
            w[7],
            D(w[4]),
            I(w[4], w[5], w[6]),
            Tr[f],
            y[f % 16]
          )), (c[7] = M(o, X(w[0]), V(w[0], w[1], w[2]))), (c[3] = M(
            c[3],
            o
          )), (a = 0);
          a < 8;
          a++
        )
          w[(a + 1) % 8] = c[a]
        if (f % 16 === 15)
          for (a = 0; a < 16; a++)
            y[a] = M(
              y[a],
              y[(a + 9) % 16],
              j(y[(a + 1) % 16]),
              H(y[(a + 14) % 16])
            )
      }
      for (f = 0; f < 8; f++)
        (w[f] = M(w[f], u[f])), (u[f] = w[f])
      ;(l += 128), (e -= 128)
    }
    for (f = 0; f < 8; f++)
      i(r, 8 * f, u[f])
    return e
  }
  function Q(r, n, e) {
    var t, o = new Uint8Array(64), f = new Uint8Array(256), a = e
    for (t = 0; t < 64; t++)
      o[t] = Lr[t]
    for (J(o, n, e), (e %= 128), (t = 0); t < 256; t++)
      f[t] = 0
    for (t = 0; t < e; t++)
      f[t] = n[a - e + t]
    for (
      (f[e] = 128), (e = 256 - 128 * (e < 112 ? 1 : 0)), (f[e - 9] = 0), i(
        f,
        e - 8,
        new sr((a / 536870912) | 0, a << 3)
      ), J(o, f, e), (t = 0);
      t < 64;
      t++
    )
      r[t] = o[t]
    return 0
  }
  function W(r, n) {
    var e = hr(),
      t = hr(),
      o = hr(),
      i = hr(),
      f = hr(),
      a = hr(),
      u = hr(),
      c = hr(),
      w = hr()
    Y(e, r[1], r[0]), Y(w, n[1], n[0]), T(e, e, w), K(t, r[0], r[1]), K(
      w,
      n[0],
      n[1]
    ), T(t, t, w), T(o, r[3], n[3]), T(o, o, Er), T(i, r[2], n[2]), K(
      i,
      i,
      i
    ), Y(f, t, e), Y(a, i, o), K(u, i, o), K(c, t, e), T(r[0], f, a), T(
      r[1],
      c,
      u
    ), T(r[2], u, a), T(r[3], f, c)
  }
  function $(r, n, e) {
    var t
    for (t = 0; t < 4; t++)
      x(r[t], n[t], e)
  }
  function rr(r, n) {
    var e = hr(), t = hr(), o = hr()
    k(o, n[2]), T(e, n[0], o), T(t, n[1], o), d(r, t), (r[31] ^= B(e) << 7)
  }
  function nr(r, n, e) {
    var t, o
    for (
      U(r[0], pr), U(r[1], _r), U(r[2], _r), U(r[3], pr), (o = 255);
      o >= 0;
      --o
    )
      (t = (e[(o / 8) | 0] >> (7 & o)) & 1), $(r, n, t), W(n, r), W(r, r), $(
        r,
        n,
        t
      )
  }
  function er(r, n) {
    var e = [hr(), hr(), hr(), hr()]
    U(e[0], xr), U(e[1], dr), U(e[2], _r), T(e[3], xr, dr), nr(r, e, n)
  }
  function tr(r, n, e) {
    var t, o = new Uint8Array(64), i = [hr(), hr(), hr(), hr()]
    for (
      e || vr(n, 32), Q(
        o,
        n,
        32
      ), (o[0] &= 248), (o[31] &= 127), (o[31] |= 64), er(i, o), rr(
        r,
        i
      ), (t = 0);
      t < 32;
      t++
    )
      n[t + 32] = r[t]
    return 0
  }
  function or(r, n) {
    var e, t, o, i
    for (t = 63; t >= 32; --t) {
      for ((e = 0), (o = t - 32), (i = t - 12); o < i; ++o)
        (n[o] += e - 16 * n[t] * kr[o - (t - 32)]), (e = (n[o] + 128) >> 8), (n[
          o
        ] -=
          256 * e)
      ;(n[o] += e), (n[t] = 0)
    }
    for ((e = 0), (o = 0); o < 32; o++)
      (n[o] += e - (n[31] >> 4) * kr[o]), (e = n[o] >> 8), (n[o] &= 255)
    for (o = 0; o < 32; o++)
      n[o] -= e * kr[o]
    for (t = 0; t < 32; t++)
      (n[t + 1] += n[t] >> 8), (r[t] = 255 & n[t])
  }
  function ir(r) {
    var n, e = new Float64Array(64)
    for (n = 0; n < 64; n++)
      e[n] = r[n]
    for (n = 0; n < 64; n++)
      r[n] = 0
    or(r, e)
  }
  function fr(r, n, e, t) {
    var o,
      i,
      f = new Uint8Array(64),
      a = new Uint8Array(64),
      u = new Uint8Array(64),
      c = new Float64Array(64),
      w = [hr(), hr(), hr(), hr()]
    Q(f, t, 32), (f[0] &= 248), (f[31] &= 127), (f[31] |= 64)
    var y = e + 64
    for (o = 0; o < e; o++)
      r[64 + o] = n[o]
    for (o = 0; o < 32; o++)
      r[32 + o] = f[32 + o]
    for (
      Q(u, r.subarray(32), e + 32), ir(u), er(w, u), rr(r, w), (o = 32);
      o < 64;
      o++
    )
      r[o] = t[o]
    for (Q(a, r, e + 64), ir(a), (o = 0); o < 64; o++)
      c[o] = 0
    for (o = 0; o < 32; o++)
      c[o] = u[o]
    for (o = 0; o < 32; o++)
      for (i = 0; i < 32; i++)
        c[o + i] += a[o] * f[i]
    return or(r.subarray(32), c), y
  }
  function ar(r, n) {
    var e = hr(), t = hr(), o = hr(), i = hr(), f = hr(), a = hr(), u = hr()
    return U(r[2], _r), S(r[1], n), L(o, r[1]), T(i, o, Ur), Y(o, o, r[2]), K(
      i,
      r[2],
      i
    ), L(f, i), L(a, f), T(u, a, f), T(e, u, o), T(e, e, i), z(e, e), T(
      e,
      e,
      o
    ), T(e, e, i), T(e, e, i), T(r[0], e, i), L(t, r[0]), T(t, t, i), m(t, o) &&
      T(r[0], r[0], mr), L(t, r[0]), T(t, t, i), m(t, o)
      ? -1
      : (B(r[0]) === n[31] >> 7 && Y(r[0], pr, r[0]), T(r[3], r[0], r[1]), 0)
  }
  function ur(r, n, e, t) {
    var o,
      i,
      f = new Uint8Array(32),
      a = new Uint8Array(64),
      c = [hr(), hr(), hr(), hr()],
      w = [hr(), hr(), hr(), hr()]
    if (((i = -1), e < 64)) return -1
    if (ar(w, t)) return -1
    for (o = 0; o < e; o++)
      r[o] = n[o]
    for (o = 0; o < 32; o++)
      r[o + 32] = t[o]
    if (
      (Q(a, r, e), ir(a), nr(c, w, a), er(w, n.subarray(32)), W(c, w), rr(
        f,
        c
      ), (e -= 64), u(n, 0, f, 0))
    ) {
      for (o = 0; o < e; o++)
        r[o] = 0
      return -1
    }
    for (o = 0; o < e; o++)
      r[o] = n[o + 64]
    return (i = e)
  }
  function cr(r, n) {
    if (r.length !== zr) throw new Error('bad key size')
    if (n.length !== Rr) throw new Error('bad nonce size')
  }
  function wr(r, n) {
    if (r.length !== Fr) throw new Error('bad public key size')
    if (n.length !== Mr) throw new Error('bad secret key size')
  }
  function yr() {
    for (var r = 0; r < arguments.length; r++)
      if (!(arguments[r] instanceof Uint8Array))
        throw new TypeError('unexpected type, use Uint8Array')
  }
  function lr(r) {
    for (var n = 0; n < r.length; n++)
      r[n] = 0
  }
  var sr = function(r, n) {
    ;(this.hi = 0 | r), (this.lo = 0 | n)
  },
    hr = function(r) {
      var n, e = new Float64Array(16)
      if (r) for (n = 0; n < r.length; n++) e[n] = r[n]
      return e
    },
    vr = function() {
      throw new Error('no PRNG')
    },
    gr = new Uint8Array(16),
    br = new Uint8Array(32)
  br[0] = 9
  var pr = hr(),
    _r = hr([1]),
    Ar = hr([56129, 1]),
    Ur = hr([
      30883,
      4953,
      19914,
      30187,
      55467,
      16705,
      2637,
      112,
      59544,
      30585,
      16505,
      36039,
      65139,
      11119,
      27886,
      20995,
    ]),
    Er = hr([
      61785,
      9906,
      39828,
      60374,
      45398,
      33411,
      5274,
      224,
      53552,
      61171,
      33010,
      6542,
      64743,
      22239,
      55772,
      9222,
    ]),
    xr = hr([
      54554,
      36645,
      11616,
      51542,
      42930,
      38181,
      51040,
      26924,
      56412,
      64982,
      57905,
      49316,
      21502,
      52590,
      14035,
      8553,
    ]),
    dr = hr([
      26200,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
    ]),
    mr = hr([
      41136,
      18958,
      6951,
      50414,
      58488,
      44335,
      6150,
      12099,
      55207,
      15867,
      153,
      11085,
      57099,
      20417,
      9344,
      11139,
    ]),
    Br = new Uint8Array([
      101,
      120,
      112,
      97,
      110,
      100,
      32,
      51,
      50,
      45,
      98,
      121,
      116,
      101,
      32,
      107,
    ]),
    Sr = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]),
    Kr = _,
    Yr = A,
    Tr = [
      new sr(1116352408, 3609767458),
      new sr(1899447441, 602891725),
      new sr(3049323471, 3964484399),
      new sr(3921009573, 2173295548),
      new sr(961987163, 4081628472),
      new sr(1508970993, 3053834265),
      new sr(2453635748, 2937671579),
      new sr(2870763221, 3664609560),
      new sr(3624381080, 2734883394),
      new sr(310598401, 1164996542),
      new sr(607225278, 1323610764),
      new sr(1426881987, 3590304994),
      new sr(1925078388, 4068182383),
      new sr(2162078206, 991336113),
      new sr(2614888103, 633803317),
      new sr(3248222580, 3479774868),
      new sr(3835390401, 2666613458),
      new sr(4022224774, 944711139),
      new sr(264347078, 2341262773),
      new sr(604807628, 2007800933),
      new sr(770255983, 1495990901),
      new sr(1249150122, 1856431235),
      new sr(1555081692, 3175218132),
      new sr(1996064986, 2198950837),
      new sr(2554220882, 3999719339),
      new sr(2821834349, 766784016),
      new sr(2952996808, 2566594879),
      new sr(3210313671, 3203337956),
      new sr(3336571891, 1034457026),
      new sr(3584528711, 2466948901),
      new sr(113926993, 3758326383),
      new sr(338241895, 168717936),
      new sr(666307205, 1188179964),
      new sr(773529912, 1546045734),
      new sr(1294757372, 1522805485),
      new sr(1396182291, 2643833823),
      new sr(1695183700, 2343527390),
      new sr(1986661051, 1014477480),
      new sr(2177026350, 1206759142),
      new sr(2456956037, 344077627),
      new sr(2730485921, 1290863460),
      new sr(2820302411, 3158454273),
      new sr(3259730800, 3505952657),
      new sr(3345764771, 106217008),
      new sr(3516065817, 3606008344),
      new sr(3600352804, 1432725776),
      new sr(4094571909, 1467031594),
      new sr(275423344, 851169720),
      new sr(430227734, 3100823752),
      new sr(506948616, 1363258195),
      new sr(659060556, 3750685593),
      new sr(883997877, 3785050280),
      new sr(958139571, 3318307427),
      new sr(1322822218, 3812723403),
      new sr(1537002063, 2003034995),
      new sr(1747873779, 3602036899),
      new sr(1955562222, 1575990012),
      new sr(2024104815, 1125592928),
      new sr(2227730452, 2716904306),
      new sr(2361852424, 442776044),
      new sr(2428436474, 593698344),
      new sr(2756734187, 3733110249),
      new sr(3204031479, 2999351573),
      new sr(3329325298, 3815920427),
      new sr(3391569614, 3928383900),
      new sr(3515267271, 566280711),
      new sr(3940187606, 3454069534),
      new sr(4118630271, 4000239992),
      new sr(116418474, 1914138554),
      new sr(174292421, 2731055270),
      new sr(289380356, 3203993006),
      new sr(460393269, 320620315),
      new sr(685471733, 587496836),
      new sr(852142971, 1086792851),
      new sr(1017036298, 365543100),
      new sr(1126000580, 2618297676),
      new sr(1288033470, 3409855158),
      new sr(1501505948, 4234509866),
      new sr(1607167915, 987167468),
      new sr(1816402316, 1246189591),
    ],
    Lr = new Uint8Array([
      106,
      9,
      230,
      103,
      243,
      188,
      201,
      8,
      187,
      103,
      174,
      133,
      132,
      202,
      167,
      59,
      60,
      110,
      243,
      114,
      254,
      148,
      248,
      43,
      165,
      79,
      245,
      58,
      95,
      29,
      54,
      241,
      81,
      14,
      82,
      127,
      173,
      230,
      130,
      209,
      155,
      5,
      104,
      140,
      43,
      62,
      108,
      31,
      31,
      131,
      217,
      171,
      251,
      65,
      189,
      107,
      91,
      224,
      205,
      25,
      19,
      126,
      33,
      121,
    ]),
    kr = new Float64Array([
      237,
      211,
      245,
      92,
      26,
      99,
      18,
      88,
      214,
      156,
      247,
      162,
      222,
      249,
      222,
      20,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      16,
    ]),
    zr = 32,
    Rr = 24,
    Pr = 32,
    Nr = 16,
    Or = 32,
    Cr = 32,
    Fr = 32,
    Mr = 32,
    Gr = 32,
    Zr = Rr,
    qr = Pr,
    Ir = Nr,
    Vr = 64,
    Xr = 32,
    Dr = 64,
    jr = 32,
    Hr = 64
  ;(r.lowlevel = {
    crypto_core_hsalsa20: y,
    crypto_stream_xor: v,
    crypto_stream: h,
    crypto_stream_salsa20_xor: l,
    crypto_stream_salsa20: s,
    crypto_onetimeauth: b,
    crypto_onetimeauth_verify: p,
    crypto_verify_16: a,
    crypto_verify_32: u,
    crypto_secretbox: _,
    crypto_secretbox_open: A,
    crypto_scalarmult: R,
    crypto_scalarmult_base: P,
    crypto_box_beforenm: O,
    crypto_box_afternm: Kr,
    crypto_box: C,
    crypto_box_open: F,
    crypto_box_keypair: N,
    crypto_hash: Q,
    crypto_sign: fr,
    crypto_sign_keypair: tr,
    crypto_sign_open: ur,
    crypto_secretbox_KEYBYTES: zr,
    crypto_secretbox_NONCEBYTES: Rr,
    crypto_secretbox_ZEROBYTES: Pr,
    crypto_secretbox_BOXZEROBYTES: Nr,
    crypto_scalarmult_BYTES: Or,
    crypto_scalarmult_SCALARBYTES: Cr,
    crypto_box_PUBLICKEYBYTES: Fr,
    crypto_box_SECRETKEYBYTES: Mr,
    crypto_box_BEFORENMBYTES: Gr,
    crypto_box_NONCEBYTES: Zr,
    crypto_box_ZEROBYTES: qr,
    crypto_box_BOXZEROBYTES: Ir,
    crypto_sign_BYTES: Vr,
    crypto_sign_PUBLICKEYBYTES: Xr,
    crypto_sign_SECRETKEYBYTES: Dr,
    crypto_sign_SEEDBYTES: jr,
    crypto_hash_BYTES: Hr,
  }), (r.randomBytes = function(r) {
    var n = new Uint8Array(r)
    return vr(n, r), n
  }), (r.secretbox = function(r, n, e) {
    yr(r, n, e), cr(e, n)
    for (
      var t = new Uint8Array(Pr + r.length),
        o = new Uint8Array(t.length),
        i = 0;
      i < r.length;
      i++
    )
      t[i + Pr] = r[i]
    return _(o, t, t.length, n, e), o.subarray(Nr)
  }), (r.secretbox.open = function(r, n, e) {
    yr(r, n, e), cr(e, n)
    for (
      var t = new Uint8Array(Nr + r.length),
        o = new Uint8Array(t.length),
        i = 0;
      i < r.length;
      i++
    )
      t[i + Nr] = r[i]
    return t.length < 32
      ? null
      : 0 !== A(o, t, t.length, n, e) ? null : o.subarray(Pr)
  }), (r.secretbox.keyLength = zr), (r.secretbox.nonceLength = Rr), (r.secretbox.overheadLength = Nr), (r.scalarMult = function(
    r,
    n
  ) {
    if ((yr(r, n), r.length !== Cr)) throw new Error('bad n size')
    if (n.length !== Or) throw new Error('bad p size')
    var e = new Uint8Array(Or)
    return R(e, r, n), e
  }), (r.scalarMult.base = function(r) {
    if ((yr(r), r.length !== Cr)) throw new Error('bad n size')
    var n = new Uint8Array(Or)
    return P(n, r), n
  }), (r.scalarMult.scalarLength = Cr), (r.scalarMult.groupElementLength = Or), (r.box = function(
    n,
    e,
    t,
    o
  ) {
    var i = r.box.before(t, o)
    return r.secretbox(n, e, i)
  }), (r.box.before = function(r, n) {
    yr(r, n), wr(r, n)
    var e = new Uint8Array(Gr)
    return O(e, r, n), e
  }), (r.box.after = r.secretbox), (r.box.open = function(n, e, t, o) {
    var i = r.box.before(t, o)
    return r.secretbox.open(n, e, i)
  }), (r.box.open.after = r.secretbox.open), (r.box.keyPair = function() {
    var r = new Uint8Array(Fr), n = new Uint8Array(Mr)
    return N(r, n), { publicKey: r, secretKey: n }
  }), (r.box.keyPair.fromSecretKey = function(r) {
    if ((yr(r), r.length !== Mr)) throw new Error('bad secret key size')
    var n = new Uint8Array(Fr)
    return P(n, r), { publicKey: n, secretKey: new Uint8Array(r) }
  }), (r.box.publicKeyLength = Fr), (r.box.secretKeyLength = Mr), (r.box.sharedKeyLength = Gr), (r.box.nonceLength = Zr), (r.box.overheadLength =
    r.secretbox.overheadLength), (r.sign = function(r, n) {
    if ((yr(r, n), n.length !== Dr)) throw new Error('bad secret key size')
    var e = new Uint8Array(Vr + r.length)
    return fr(e, r, r.length, n), e
  }), (r.sign.open = function(r, n) {
    if ((yr(r, n), n.length !== Xr)) throw new Error('bad public key size')
    var e = new Uint8Array(r.length), t = ur(e, r, r.length, n)
    if (t < 0) return null
    for (var o = new Uint8Array(t), i = 0; i < o.length; i++)
      o[i] = e[i]
    return o
  }), (r.sign.detached = function(n, e) {
    for (var t = r.sign(n, e), o = new Uint8Array(Vr), i = 0; i < o.length; i++)
      o[i] = t[i]
    return o
  }), (r.sign.detached.verify = function(r, n, e) {
    if ((yr(r, n, e), n.length !== Vr)) throw new Error('bad signature size')
    if (e.length !== Xr) throw new Error('bad public key size')
    var t, o = new Uint8Array(Vr + r.length), i = new Uint8Array(Vr + r.length)
    for (t = 0; t < Vr; t++)
      o[t] = n[t]
    for (t = 0; t < r.length; t++)
      o[t + Vr] = r[t]
    return ur(i, o, o.length, e) >= 0
  }), (r.sign.keyPair = function() {
    var r = new Uint8Array(Xr), n = new Uint8Array(Dr)
    return tr(r, n), { publicKey: r, secretKey: n }
  }), (r.sign.keyPair.fromSecretKey = function(r) {
    if ((yr(r), r.length !== Dr)) throw new Error('bad secret key size')
    for (var n = new Uint8Array(Xr), e = 0; e < n.length; e++)
      n[e] = r[32 + e]
    return { publicKey: n, secretKey: new Uint8Array(r) }
  }), (r.sign.keyPair.fromSeed = function(r) {
    if ((yr(r), r.length !== jr)) throw new Error('bad seed size')
    for (var n = new Uint8Array(Xr), e = new Uint8Array(Dr), t = 0; t < 32; t++)
      e[t] = r[t]
    return tr(n, e, !0), { publicKey: n, secretKey: e }
  }), (r.sign.publicKeyLength = Xr), (r.sign.secretKeyLength = Dr), (r.sign.seedLength = jr), (r.sign.signatureLength = Vr), (r.hash = function(
    r
  ) {
    yr(r)
    var n = new Uint8Array(Hr)
    return Q(n, r, r.length), n
  }), (r.hash.hashLength = Hr), (r.verify = function(r, n) {
    return yr(r, n), 0 !== r.length &&
      0 !== n.length &&
      (r.length === n.length && 0 === f(r, 0, n, 0, r.length))
  }), (r.setPRNG = function(r) {
    vr = r
  }), (function() {
    var n = 'undefined' != typeof self ? self.crypto || self.msCrypto : null
    if (n && n.getRandomValues) {
      var e = 65536
      r.setPRNG(function(r, t) {
        var o, i = new Uint8Array(t)
        for (
          o = 0;
          o < t;
          o += e
        ) n.getRandomValues(i.subarray(o, o + Math.min(t - o, e)))
        for (o = 0; o < t; o++) r[o] = i[o]
        lr(i)
      })
    } else
      'undefined' != typeof require &&
        ((n = require('crypto')), n &&
          n.randomBytes &&
          r.setPRNG(function(r, e) {
            var t, o = n.randomBytes(e)
            for (t = 0; t < e; t++) r[t] = o[t]
            lr(o)
          }))
  })()
})(
  'undefined' != typeof module && module.exports
    ? module.exports
    : (self.nacl = self.nacl || {})
)

;(function(f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f()
  } else if (typeof define === 'function' && define.amd) {
    define([], f)
  } else {
    var g
    if (typeof window !== 'undefined') {
      g = window
    } else if (typeof global !== 'undefined') {
      g = global
    } else if (typeof self !== 'undefined') {
      g = self
    } else {
      g = this
    }
    g.bs58 = f()
  }
})(function() {
  var define, module, exports
  return (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == 'function' && require
          if (!u && a) return a(o, !0)
          if (i) return i(o, !0)
          var f = new Error("Cannot find module '" + o + "'")
          throw ((f.code = 'MODULE_NOT_FOUND'), f)
        }
        var l = (n[o] = { exports: {} })
        t[o][0].call(
          l.exports,
          function(e) {
            var n = t[o][1][e]
            return s(n ? n : e)
          },
          l,
          l.exports,
          e,
          t,
          n,
          r
        )
      }
      return n[o].exports
    }
    var i = typeof require == 'function' && require
    for (var o = 0; o < r.length; o++) s(r[o])
    return s
  })(
    {
      1: [
        function(require, module, exports) {
          'use strict'
          exports.byteLength = byteLength
          exports.toByteArray = toByteArray
          exports.fromByteArray = fromByteArray

          var lookup = []
          var revLookup = []
          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

          var code =
            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
          }

          revLookup['-'.charCodeAt(0)] = 62
          revLookup['_'.charCodeAt(0)] = 63

          function placeHoldersCount(b64) {
            var len = b64.length
            if (len % 4 > 0) {
              throw new Error('Invalid string. Length must be a multiple of 4')
            }

            // the number of equal signs (place holders)
            // if there are two placeholders, than the two characters before it
            // represent one byte
            // if there is only one, then the three characters before it represent 2 bytes
            // this is just a cheap hack to not do indexOf twice
            return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
          }

          function byteLength(b64) {
            // base64 is 4/3 + up to two characters of the original data
            return b64.length * 3 / 4 - placeHoldersCount(b64)
          }

          function toByteArray(b64) {
            var i, l, tmp, placeHolders, arr
            var len = b64.length
            placeHolders = placeHoldersCount(b64)

            arr = new Arr(len * 3 / 4 - placeHolders)

            // if there are placeholders, only get up to the last complete 4 chars
            l = placeHolders > 0 ? len - 4 : len

            var L = 0

            for (i = 0; i < l; i += 4) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)]
              arr[L++] = (tmp >> 16) & 0xff
              arr[L++] = (tmp >> 8) & 0xff
              arr[L++] = tmp & 0xff
            }

            if (placeHolders === 2) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 2) |
                (revLookup[b64.charCodeAt(i + 1)] >> 4)
              arr[L++] = tmp & 0xff
            } else if (placeHolders === 1) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2)
              arr[L++] = (tmp >> 8) & 0xff
              arr[L++] = tmp & 0xff
            }

            return arr
          }

          function tripletToBase64(num) {
            return (
              lookup[(num >> 18) & 0x3f] +
              lookup[(num >> 12) & 0x3f] +
              lookup[(num >> 6) & 0x3f] +
              lookup[num & 0x3f]
            )
          }

          function encodeChunk(uint8, start, end) {
            var tmp
            var output = []
            for (var i = start; i < end; i += 3) {
              tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]
              output.push(tripletToBase64(tmp))
            }
            return output.join('')
          }

          function fromByteArray(uint8) {
            var tmp
            var len = uint8.length
            var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
            var output = ''
            var parts = []
            var maxChunkLength = 16383 // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (
              var i = 0, len2 = len - extraBytes;
              i < len2;
              i += maxChunkLength
            ) {
              parts.push(
                encodeChunk(
                  uint8,
                  i,
                  i + maxChunkLength > len2 ? len2 : i + maxChunkLength
                )
              )
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
              tmp = uint8[len - 1]
              output += lookup[tmp >> 2]
              output += lookup[(tmp << 4) & 0x3f]
              output += '=='
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1]
              output += lookup[tmp >> 10]
              output += lookup[(tmp >> 4) & 0x3f]
              output += lookup[(tmp << 2) & 0x3f]
              output += '='
            }

            parts.push(output)

            return parts.join('')
          }
        },
        {},
      ],
      2: [
        function(require, module, exports) {
          /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
          /* eslint-disable no-proto */

          'use strict'
          var base64 = require('base64-js')
          var ieee754 = require('ieee754')

          exports.Buffer = Buffer
          exports.SlowBuffer = SlowBuffer
          exports.INSPECT_MAX_BYTES = 50

          var K_MAX_LENGTH = 0x7fffffff
          exports.kMaxLength = K_MAX_LENGTH

          /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

          if (
            !Buffer.TYPED_ARRAY_SUPPORT &&
            typeof console !== 'undefined' &&
            typeof console.error === 'function'
          ) {
            console.error(
              'This browser lacks typed array (Uint8Array) support which is required by ' +
                '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
            )
          }

          function typedArraySupport() {
            // Can typed array instances can be augmented?
            try {
              var arr = new Uint8Array(1)
              arr.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function() {
                  return 42
                },
              }
              return arr.foo() === 42
            } catch (e) {
              return false
            }
          }

          function createBuffer(length) {
            if (length > K_MAX_LENGTH) {
              throw new RangeError('Invalid typed array length')
            }
            // Return an augmented `Uint8Array` instance
            var buf = new Uint8Array(length)
            buf.__proto__ = Buffer.prototype
            return buf
          }

          /**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

          function Buffer(arg, encodingOrOffset, length) {
            // Common case.
            if (typeof arg === 'number') {
              if (typeof encodingOrOffset === 'string') {
                throw new Error(
                  'If encoding is specified then the first argument must be a string'
                )
              }
              return allocUnsafe(arg)
            }
            return from(arg, encodingOrOffset, length)
          }

          // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
          if (
            typeof Symbol !== 'undefined' &&
            Symbol.species &&
            Buffer[Symbol.species] === Buffer
          ) {
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true,
              enumerable: false,
              writable: false,
            })
          }

          Buffer.poolSize = 8192 // not used by this implementation

          function from(value, encodingOrOffset, length) {
            if (typeof value === 'number') {
              throw new TypeError('"value" argument must not be a number')
            }

            if (isArrayBuffer(value)) {
              return fromArrayBuffer(value, encodingOrOffset, length)
            }

            if (typeof value === 'string') {
              return fromString(value, encodingOrOffset)
            }

            return fromObject(value)
          }

          /**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
          Buffer.from = function(value, encodingOrOffset, length) {
            return from(value, encodingOrOffset, length)
          }

          // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
          // https://github.com/feross/buffer/pull/148
          Buffer.prototype.__proto__ = Uint8Array.prototype
          Buffer.__proto__ = Uint8Array

          function assertSize(size) {
            if (typeof size !== 'number') {
              throw new TypeError('"size" argument must be a number')
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative')
            }
          }

          function alloc(size, fill, encoding) {
            assertSize(size)
            if (size <= 0) {
              return createBuffer(size)
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === 'string'
                ? createBuffer(size).fill(fill, encoding)
                : createBuffer(size).fill(fill)
            }
            return createBuffer(size)
          }

          /**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
          Buffer.alloc = function(size, fill, encoding) {
            return alloc(size, fill, encoding)
          }

          function allocUnsafe(size) {
            assertSize(size)
            return createBuffer(size < 0 ? 0 : checked(size) | 0)
          }

          /**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
          Buffer.allocUnsafe = function(size) {
            return allocUnsafe(size)
          }
          /**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
          Buffer.allocUnsafeSlow = function(size) {
            return allocUnsafe(size)
          }

          function fromString(string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
              encoding = 'utf8'
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding')
            }

            var length = byteLength(string, encoding) | 0
            var buf = createBuffer(length)

            var actual = buf.write(string, encoding)

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              buf = buf.slice(0, actual)
            }

            return buf
          }

          function fromArrayLike(array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0
            var buf = createBuffer(length)
            for (var i = 0; i < length; i += 1) {
              buf[i] = array[i] & 255
            }
            return buf
          }

          function fromArrayBuffer(array, byteOffset, length) {
            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError("'offset' is out of bounds")
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError("'length' is out of bounds")
            }

            var buf
            if (byteOffset === undefined && length === undefined) {
              buf = new Uint8Array(array)
            } else if (length === undefined) {
              buf = new Uint8Array(array, byteOffset)
            } else {
              buf = new Uint8Array(array, byteOffset, length)
            }

            // Return an augmented `Uint8Array` instance
            buf.__proto__ = Buffer.prototype
            return buf
          }

          function fromObject(obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0
              var buf = createBuffer(len)

              if (buf.length === 0) {
                return buf
              }

              obj.copy(buf, 0, 0, len)
              return buf
            }

            if (obj) {
              if (isArrayBufferView(obj) || 'length' in obj) {
                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                  return createBuffer(0)
                }
                return fromArrayLike(obj)
              }

              if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data)
              }
            }

            throw new TypeError(
              'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
            )
          }

          function checked(length) {
            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= K_MAX_LENGTH) {
              throw new RangeError(
                'Attempt to allocate Buffer larger than maximum ' +
                  'size: 0x' +
                  K_MAX_LENGTH.toString(16) +
                  ' bytes'
              )
            }
            return length | 0
          }

          function SlowBuffer(length) {
            if (+length != length) {
              // eslint-disable-line eqeqeq
              length = 0
            }
            return Buffer.alloc(+length)
          }

          Buffer.isBuffer = function isBuffer(b) {
            return b != null && b._isBuffer === true
          }

          Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError('Arguments must be Buffers')
            }

            if (a === b) return 0

            var x = a.length
            var y = b.length

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i]
                y = b[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return true
              default:
                return false
            }
          }

          Buffer.concat = function concat(list, length) {
            if (!Array.isArray(list)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }

            if (list.length === 0) {
              return Buffer.alloc(0)
            }

            var i
            if (length === undefined) {
              length = 0
              for (i = 0; i < list.length; ++i) {
                length += list[i].length
              }
            }

            var buffer = Buffer.allocUnsafe(length)
            var pos = 0
            for (i = 0; i < list.length; ++i) {
              var buf = list[i]
              if (!Buffer.isBuffer(buf)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                )
              }
              buf.copy(buffer, pos)
              pos += buf.length
            }
            return buffer
          }

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length
            }
            if (isArrayBufferView(string) || isArrayBuffer(string)) {
              return string.byteLength
            }
            if (typeof string !== 'string') {
              string = '' + string
            }

            var len = string.length
            if (len === 0) return 0

            // Use a for loop to avoid recursion
            var loweredCase = false
            for (;;) {
              switch (encoding) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return len
                case 'utf8':
                case 'utf-8':
                case undefined:
                  return utf8ToBytes(string).length
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return len * 2
                case 'hex':
                  return len >>> 1
                case 'base64':
                  return base64ToBytes(string).length
                default:
                  if (loweredCase) return utf8ToBytes(string).length // assume utf8
                  encoding = ('' + encoding).toLowerCase()
                  loweredCase = true
              }
            }
          }
          Buffer.byteLength = byteLength

          function slowToString(encoding, start, end) {
            var loweredCase = false

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return ''
            }

            if (end === undefined || end > this.length) {
              end = this.length
            }

            if (end <= 0) {
              return ''
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0
            start >>>= 0

            if (end <= start) {
              return ''
            }

            if (!encoding) encoding = 'utf8'

            while (true) {
              switch (encoding) {
                case 'hex':
                  return hexSlice(this, start, end)

                case 'utf8':
                case 'utf-8':
                  return utf8Slice(this, start, end)

                case 'ascii':
                  return asciiSlice(this, start, end)

                case 'latin1':
                case 'binary':
                  return latin1Slice(this, start, end)

                case 'base64':
                  return base64Slice(this, start, end)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return utf16leSlice(this, start, end)

                default:
                  if (loweredCase)
                    throw new TypeError('Unknown encoding: ' + encoding)
                  encoding = (encoding + '').toLowerCase()
                  loweredCase = true
              }
            }
          }

          // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
          // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
          // reliably in a browserify context because there could be multiple different
          // copies of the 'buffer' package in use. This method works even for Buffer
          // instances that were created from another copy of the `buffer` package.
          // See: https://github.com/feross/buffer/issues/154
          Buffer.prototype._isBuffer = true

          function swap(b, n, m) {
            var i = b[n]
            b[n] = b[m]
            b[m] = i
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length
            if (len % 2 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 16-bits')
            }
            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1)
            }
            return this
          }

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length
            if (len % 4 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 32-bits')
            }
            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3)
              swap(this, i + 1, i + 2)
            }
            return this
          }

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length
            if (len % 8 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 64-bits')
            }
            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7)
              swap(this, i + 1, i + 6)
              swap(this, i + 2, i + 5)
              swap(this, i + 3, i + 4)
            }
            return this
          }

          Buffer.prototype.toString = function toString() {
            var length = this.length
            if (length === 0) return ''
            if (arguments.length === 0) return utf8Slice(this, 0, length)
            return slowToString.apply(this, arguments)
          }

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b))
              throw new TypeError('Argument must be a Buffer')
            if (this === b) return true
            return Buffer.compare(this, b) === 0
          }

          Buffer.prototype.inspect = function inspect() {
            var str = ''
            var max = exports.INSPECT_MAX_BYTES
            if (this.length > 0) {
              str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
              if (this.length > max) str += ' ... '
            }
            return '<Buffer ' + str + '>'
          }

          Buffer.prototype.compare = function compare(
            target,
            start,
            end,
            thisStart,
            thisEnd
          ) {
            if (!Buffer.isBuffer(target)) {
              throw new TypeError('Argument must be a Buffer')
            }

            if (start === undefined) {
              start = 0
            }
            if (end === undefined) {
              end = target ? target.length : 0
            }
            if (thisStart === undefined) {
              thisStart = 0
            }
            if (thisEnd === undefined) {
              thisEnd = this.length
            }

            if (
              start < 0 ||
              end > target.length ||
              thisStart < 0 ||
              thisEnd > this.length
            ) {
              throw new RangeError('out of range index')
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0
            }
            if (thisStart >= thisEnd) {
              return -1
            }
            if (start >= end) {
              return 1
            }

            start >>>= 0
            end >>>= 0
            thisStart >>>= 0
            thisEnd >>>= 0

            if (this === target) return 0

            var x = thisEnd - thisStart
            var y = end - start
            var len = Math.min(x, y)

            var thisCopy = this.slice(thisStart, thisEnd)
            var targetCopy = target.slice(start, end)

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i]
                y = targetCopy[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf(
            buffer,
            val,
            byteOffset,
            encoding,
            dir
          ) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1

            // Normalize byteOffset
            if (typeof byteOffset === 'string') {
              encoding = byteOffset
              byteOffset = 0
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000
            }
            byteOffset = +byteOffset // Coerce to Number.
            if (numberIsNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : buffer.length - 1
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset
            if (byteOffset >= buffer.length) {
              if (dir) return -1
              else byteOffset = buffer.length - 1
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0
              else return -1
            }

            // Normalize val
            if (typeof val === 'string') {
              val = Buffer.from(val, encoding)
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
            } else if (typeof val === 'number') {
              val = val & 0xff // Search for a byte value [0-255]
              if (typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(
                    buffer,
                    val,
                    byteOffset
                  )
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(
                    buffer,
                    val,
                    byteOffset
                  )
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
            }

            throw new TypeError('val must be string, number or Buffer')
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1
            var arrLength = arr.length
            var valLength = val.length

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase()
              if (
                encoding === 'ucs2' ||
                encoding === 'ucs-2' ||
                encoding === 'utf16le' ||
                encoding === 'utf-16le'
              ) {
                if (arr.length < 2 || val.length < 2) {
                  return -1
                }
                indexSize = 2
                arrLength /= 2
                valLength /= 2
                byteOffset /= 2
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i]
              } else {
                return buf.readUInt16BE(i * indexSize)
              }
            }

            var i
            if (dir) {
              var foundIndex = -1
              for (i = byteOffset; i < arrLength; i++) {
                if (
                  read(arr, i) ===
                  read(val, foundIndex === -1 ? 0 : i - foundIndex)
                ) {
                  if (foundIndex === -1) foundIndex = i
                  if (i - foundIndex + 1 === valLength)
                    return foundIndex * indexSize
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex
                  foundIndex = -1
                }
              }
            } else {
              if (byteOffset + valLength > arrLength)
                byteOffset = arrLength - valLength
              for (i = byteOffset; i >= 0; i--) {
                var found = true
                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false
                    break
                  }
                }
                if (found) return i
              }
            }

            return -1
          }

          Buffer.prototype.includes = function includes(
            val,
            byteOffset,
            encoding
          ) {
            return this.indexOf(val, byteOffset, encoding) !== -1
          }

          Buffer.prototype.indexOf = function indexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
          }

          Buffer.prototype.lastIndexOf = function lastIndexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
          }

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0
            var remaining = buf.length - offset
            if (!length) {
              length = remaining
            } else {
              length = Number(length)
              if (length > remaining) {
                length = remaining
              }
            }

            // must be an even number of digits
            var strLen = string.length
            if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

            if (length > strLen / 2) {
              length = strLen / 2
            }
            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16)
              if (numberIsNaN(parsed)) return i
              buf[offset + i] = parsed
            }
            return i
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(
              utf8ToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            )
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length)
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(
              utf16leToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            )
          }

          Buffer.prototype.write = function write(
            string,
            offset,
            length,
            encoding
          ) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = 'utf8'
              length = this.length
              offset = 0
              // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
              encoding = offset
              length = this.length
              offset = 0
              // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset >>> 0
              if (isFinite(length)) {
                length = length >>> 0
                if (encoding === undefined) encoding = 'utf8'
              } else {
                encoding = length
                length = undefined
              }
            } else {
              throw new Error(
                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
              )
            }

            var remaining = this.length - offset
            if (length === undefined || length > remaining) length = remaining

            if (
              (string.length > 0 && (length < 0 || offset < 0)) ||
              offset > this.length
            ) {
              throw new RangeError('Attempt to write outside buffer bounds')
            }

            if (!encoding) encoding = 'utf8'

            var loweredCase = false
            for (;;) {
              switch (encoding) {
                case 'hex':
                  return hexWrite(this, string, offset, length)

                case 'utf8':
                case 'utf-8':
                  return utf8Write(this, string, offset, length)

                case 'ascii':
                  return asciiWrite(this, string, offset, length)

                case 'latin1':
                case 'binary':
                  return latin1Write(this, string, offset, length)

                case 'base64':
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return ucs2Write(this, string, offset, length)

                default:
                  if (loweredCase)
                    throw new TypeError('Unknown encoding: ' + encoding)
                  encoding = ('' + encoding).toLowerCase()
                  loweredCase = true
              }
            }
          }

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0),
            }
          }

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf)
            } else {
              return base64.fromByteArray(buf.slice(start, end))
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end)
            var res = []

            var i = start
            while (i < end) {
              var firstByte = buf[i]
              var codePoint = null
              var bytesPerSequence = firstByte > 0xef
                ? 4
                : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte
                    }
                    break
                  case 2:
                    secondByte = buf[i + 1]
                    if ((secondByte & 0xc0) === 0x80) {
                      tempCodePoint =
                        ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f)
                      if (tempCodePoint > 0x7f) {
                        codePoint = tempCodePoint
                      }
                    }
                    break
                  case 3:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0xc) |
                        ((secondByte & 0x3f) << 0x6) |
                        (thirdByte & 0x3f)
                      if (
                        tempCodePoint > 0x7ff &&
                        (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                      ) {
                        codePoint = tempCodePoint
                      }
                    }
                    break
                  case 4:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    fourthByte = buf[i + 3]
                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80 &&
                      (fourthByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0x12) |
                        ((secondByte & 0x3f) << 0xc) |
                        ((thirdByte & 0x3f) << 0x6) |
                        (fourthByte & 0x3f)
                      if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint
                      }
                    }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xfffd
                bytesPerSequence = 1
              } else if (codePoint > 0xffff) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000
                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800)
                codePoint = 0xdc00 | (codePoint & 0x3ff)
              }

              res.push(codePoint)
              i += bytesPerSequence
            }

            return decodeCodePointsArray(res)
          }

          // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          var MAX_ARGUMENTS_LENGTH = 0x1000

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = ''
            var i = 0
            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
              )
            }
            return res
          }

          function asciiSlice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7f)
            }
            return ret
          }

          function latin1Slice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i])
            }
            return ret
          }

          function hexSlice(buf, start, end) {
            var len = buf.length

            if (!start || start < 0) start = 0
            if (!end || end < 0 || end > len) end = len

            var out = ''
            for (var i = start; i < end; ++i) {
              out += toHex(buf[i])
            }
            return out
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end)
            var res = ''
            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
            }
            return res
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length
            start = ~~start
            end = end === undefined ? len : ~~end

            if (start < 0) {
              start += len
              if (start < 0) start = 0
            } else if (start > len) {
              start = len
            }

            if (end < 0) {
              end += len
              if (end < 0) end = 0
            } else if (end > len) {
              end = len
            }

            if (end < start) end = start

            var newBuf = this.subarray(start, end)
            // Return an augmented `Uint8Array` instance
            newBuf.__proto__ = Buffer.prototype
            return newBuf
          }

          /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0)
              throw new RangeError('offset is not uint')
            if (offset + ext > length)
              throw new RangeError('Trying to access beyond buffer length')
          }

          Buffer.prototype.readUIntLE = function readUIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }

            return val
          }

          Buffer.prototype.readUIntBE = function readUIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length)
            }

            var val = this[offset + --byteLength]
            var mul = 1
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul
            }

            return val
          }

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 1, this.length)
            return this[offset]
          }

          Buffer.prototype.readUInt16LE = function readUInt16LE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            return this[offset] | (this[offset + 1] << 8)
          }

          Buffer.prototype.readUInt16BE = function readUInt16BE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            return (this[offset] << 8) | this[offset + 1]
          }

          Buffer.prototype.readUInt32LE = function readUInt32LE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (
              (this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              this[offset + 3] * 0x1000000
            )
          }

          Buffer.prototype.readUInt32BE = function readUInt32BE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (
              this[offset] * 0x1000000 +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            )
          }

          Buffer.prototype.readIntLE = function readIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readIntBE = function readIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var i = byteLength
            var mul = 1
            var val = this[offset + --i]
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 1, this.length)
            if (!(this[offset] & 0x80)) return this[offset]
            return (0xff - this[offset] + 1) * -1
          }

          Buffer.prototype.readInt16LE = function readInt16LE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset] | (this[offset + 1] << 8)
            return val & 0x8000 ? val | 0xffff0000 : val
          }

          Buffer.prototype.readInt16BE = function readInt16BE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset + 1] | (this[offset] << 8)
            return val & 0x8000 ? val | 0xffff0000 : val
          }

          Buffer.prototype.readInt32LE = function readInt32LE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (
              this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
            )
          }

          Buffer.prototype.readInt32BE = function readInt32BE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (
              (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3]
            )
          }

          Buffer.prototype.readFloatLE = function readFloatLE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, true, 23, 4)
          }

          Buffer.prototype.readFloatBE = function readFloatBE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, false, 23, 4)
          }

          Buffer.prototype.readDoubleLE = function readDoubleLE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, true, 52, 8)
          }

          Buffer.prototype.readDoubleBE = function readDoubleBE(
            offset,
            noAssert
          ) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, false, 52, 8)
          }

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf))
              throw new TypeError('"buffer" argument must be a Buffer instance')
            if (value > max || value < min)
              throw new RangeError('"value" argument is out of bounds')
            if (offset + ext > buf.length)
              throw new RangeError('Index out of range')
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1
              checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var mul = 1
            var i = 0
            this[offset] = value & 0xff
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff
            }

            return offset + byteLength
          }

          Buffer.prototype.writeUIntBE = function writeUIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1
              checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var i = byteLength - 1
            var mul = 1
            this[offset + i] = value & 0xff
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff
            }

            return offset + byteLength
          }

          Buffer.prototype.writeUInt8 = function writeUInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
            this[offset] = value & 0xff
            return offset + 1
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            this[offset] = value & 0xff
            this[offset + 1] = value >>> 8
            return offset + 2
          }

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            this[offset] = value >>> 8
            this[offset + 1] = value & 0xff
            return offset + 2
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            this[offset + 3] = value >>> 24
            this[offset + 2] = value >>> 16
            this[offset + 1] = value >>> 8
            this[offset] = value & 0xff
            return offset + 4
          }

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            this[offset] = value >>> 24
            this[offset + 1] = value >>> 16
            this[offset + 2] = value >>> 8
            this[offset + 3] = value & 0xff
            return offset + 4
          }

          Buffer.prototype.writeIntLE = function writeIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = 0
            var mul = 1
            var sub = 0
            this[offset] = value & 0xff
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1
              }
              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff
            }

            return offset + byteLength
          }

          Buffer.prototype.writeIntBE = function writeIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = byteLength - 1
            var mul = 1
            var sub = 0
            this[offset + i] = value & 0xff
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1
              }
              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff
            }

            return offset + byteLength
          }

          Buffer.prototype.writeInt8 = function writeInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
            if (value < 0) value = 0xff + value + 1
            this[offset] = value & 0xff
            return offset + 1
          }

          Buffer.prototype.writeInt16LE = function writeInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            this[offset] = value & 0xff
            this[offset + 1] = value >>> 8
            return offset + 2
          }

          Buffer.prototype.writeInt16BE = function writeInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            this[offset] = value >>> 8
            this[offset + 1] = value & 0xff
            return offset + 2
          }

          Buffer.prototype.writeInt32LE = function writeInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            this[offset] = value & 0xff
            this[offset + 1] = value >>> 8
            this[offset + 2] = value >>> 16
            this[offset + 3] = value >>> 24
            return offset + 4
          }

          Buffer.prototype.writeInt32BE = function writeInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value
            offset = offset >>> 0
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (value < 0) value = 0xffffffff + value + 1
            this[offset] = value >>> 24
            this[offset + 1] = value >>> 16
            this[offset + 2] = value >>> 8
            this[offset + 3] = value & 0xff
            return offset + 4
          }

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length)
              throw new RangeError('Index out of range')
            if (offset < 0) throw new RangeError('Index out of range')
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                4,
                3.4028234663852886e38,
                -3.4028234663852886e38
              )
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4)
            return offset + 4
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeFloatBE = function writeFloatBE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, false, noAssert)
          }

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                8,
                1.7976931348623157e308,
                -1.7976931348623157e308
              )
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8)
            return offset + 8
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, false, noAssert)
          }

          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy(
            target,
            targetStart,
            start,
            end
          ) {
            if (!start) start = 0
            if (!end && end !== 0) end = this.length
            if (targetStart >= target.length) targetStart = target.length
            if (!targetStart) targetStart = 0
            if (end > 0 && end < start) end = start

            // Copy 0 bytes; we're done
            if (end === start) return 0
            if (target.length === 0 || this.length === 0) return 0

            // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError('targetStart out of bounds')
            }
            if (start < 0 || start >= this.length)
              throw new RangeError('sourceStart out of bounds')
            if (end < 0) throw new RangeError('sourceEnd out of bounds')

            // Are we oob?
            if (end > this.length) end = this.length
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start
            }

            var len = end - start
            var i

            if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start]
              }
            } else if (len < 1000) {
              // ascending copy from start
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start]
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              )
            }

            return len
          }

          // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
              if (typeof start === 'string') {
                encoding = start
                start = 0
                end = this.length
              } else if (typeof end === 'string') {
                encoding = end
                end = this.length
              }
              if (val.length === 1) {
                var code = val.charCodeAt(0)
                if (code < 256) {
                  val = code
                }
              }
              if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string')
              }
              if (
                typeof encoding === 'string' &&
                !Buffer.isEncoding(encoding)
              ) {
                throw new TypeError('Unknown encoding: ' + encoding)
              }
            } else if (typeof val === 'number') {
              val = val & 255
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError('Out of range index')
            }

            if (end <= start) {
              return this
            }

            start = start >>> 0
            end = end === undefined ? this.length : end >>> 0

            if (!val) val = 0

            var i
            if (typeof val === 'number') {
              for (i = start; i < end; ++i) {
                this[i] = val
              }
            } else {
              var bytes = Buffer.isBuffer(val) ? val : new Buffer(val, encoding)
              var len = bytes.length
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len]
              }
            }

            return this
          }

          // HELPER FUNCTIONS
          // ================

          var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

          function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = str.trim().replace(INVALID_BASE64_RE, '')
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + '='
            }
            return str
          }

          function toHex(n) {
            if (n < 16) return '0' + n.toString(16)
            return n.toString(16)
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity
            var codePoint
            var length = string.length
            var leadSurrogate = null
            var bytes = []

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i)

              // is surrogate component
              if (codePoint > 0xd7ff && codePoint < 0xe000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xdbff) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)
                    continue
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)
                    continue
                  }

                  // valid lead
                  leadSurrogate = codePoint

                  continue
                }

                // 2 leads in a row
                if (codePoint < 0xdc00) {
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)
                  leadSurrogate = codePoint
                  continue
                }

                // valid surrogate pair
                codePoint =
                  (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                  0x10000
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)
              }

              leadSurrogate = null

              // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break
                bytes.push(codePoint)
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break
                bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80)
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break
                bytes.push(
                  (codePoint >> 0xc) | 0xe0,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                )
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break
                bytes.push(
                  (codePoint >> 0x12) | 0xf0,
                  ((codePoint >> 0xc) & 0x3f) | 0x80,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                )
              } else {
                throw new Error('Invalid code point')
              }
            }

            return bytes
          }

          function asciiToBytes(str) {
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xff)
            }
            return byteArray
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break

              c = str.charCodeAt(i)
              hi = c >> 8
              lo = c % 256
              byteArray.push(lo)
              byteArray.push(hi)
            }

            return byteArray
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str))
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break
              dst[i + offset] = src[i]
            }
            return i
          }

          // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
          // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
          function isArrayBuffer(obj) {
            return (
              obj instanceof ArrayBuffer ||
              (obj != null &&
                obj.constructor != null &&
                obj.constructor.name === 'ArrayBuffer' &&
                typeof obj.byteLength === 'number')
            )
          }

          // Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
          function isArrayBufferView(obj) {
            return (
              typeof ArrayBuffer.isView === 'function' &&
              ArrayBuffer.isView(obj)
            )
          }

          function numberIsNaN(obj) {
            return obj !== obj // eslint-disable-line no-self-compare
          }
        },
        { 'base64-js': 1, ieee754: 3 },
      ],
      3: [
        function(require, module, exports) {
          exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m
            var eLen = nBytes * 8 - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var nBits = -7
            var i = isLE ? nBytes - 1 : 0
            var d = isLE ? -1 : 1
            var s = buffer[offset + i]

            i += d

            e = s & ((1 << -nBits) - 1)
            s >>= -nBits
            nBits += eLen
            for (
              ;
              nBits > 0;
              (e = e * 256 + buffer[offset + i]), (i += d), (nBits -= 8)
            ) {
            }

            m = e & ((1 << -nBits) - 1)
            e >>= -nBits
            nBits += mLen
            for (
              ;
              nBits > 0;
              (m = m * 256 + buffer[offset + i]), (i += d), (nBits -= 8)
            ) {
            }

            if (e === 0) {
              e = 1 - eBias
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity
            } else {
              m = m + Math.pow(2, mLen)
              e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
          }

          exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c
            var eLen = nBytes * 8 - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0
            var i = isLE ? 0 : nBytes - 1
            var d = isLE ? 1 : -1
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

            value = Math.abs(value)

            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0
              e = eMax
            } else {
              e = Math.floor(Math.log(value) / Math.LN2)
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--
                c *= 2
              }
              if (e + eBias >= 1) {
                value += rt / c
              } else {
                value += rt * Math.pow(2, 1 - eBias)
              }
              if (value * c >= 2) {
                e++
                c /= 2
              }

              if (e + eBias >= eMax) {
                m = 0
                e = eMax
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen)
                e = e + eBias
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                e = 0
              }
            }

            for (
              ;
              mLen >= 8;
              (buffer[offset + i] = m & 0xff), (i += d), (m /= 256), (mLen -= 8)
            ) {
            }

            e = (e << mLen) | m
            eLen += mLen
            for (
              ;
              eLen > 0;
              (buffer[offset + i] = e & 0xff), (i += d), (e /= 256), (eLen -= 8)
            ) {
            }

            buffer[offset + i - d] |= s * 128
          }
        },
        {},
      ],
      4: [
        function(require, module, exports) {
          // base-x encoding
          // Forked from https://github.com/cryptocoinjs/bs58
          // Originally written by Mike Hearn for BitcoinJ
          // Copyright (c) 2011 Google Inc
          // Ported to JavaScript by Stefan Thomas
          // Merged Buffer refactorings from base58-native by Stephen Pair
          // Copyright (c) 2013 BitPay Inc

          var Buffer = require('safe-buffer').Buffer

          module.exports = function base(ALPHABET) {
            var ALPHABET_MAP = {}
            var BASE = ALPHABET.length
            var LEADER = ALPHABET.charAt(0)

            // pre-compute lookup table
            for (var z = 0; z < ALPHABET.length; z++) {
              var x = ALPHABET.charAt(z)

              if (ALPHABET_MAP[x] !== undefined)
                throw new TypeError(x + ' is ambiguous')
              ALPHABET_MAP[x] = z
            }

            function encode(source) {
              if (source.length === 0) return ''

              var digits = [0]
              for (var i = 0; i < source.length; ++i) {
                for (var j = 0, carry = source[i]; j < digits.length; ++j) {
                  carry += digits[j] << 8
                  digits[j] = carry % BASE
                  carry = (carry / BASE) | 0
                }

                while (carry > 0) {
                  digits.push(carry % BASE)
                  carry = (carry / BASE) | 0
                }
              }

              var string = ''

              // deal with leading zeros
              for (var k = 0; source[k] === 0 && k < source.length - 1; ++k)
                string += ALPHABET[0]
              // convert digits to a string
              for (var q = digits.length - 1; q >= 0; --q)
                string += ALPHABET[digits[q]]

              return string
            }

            function decodeUnsafe(string) {
              if (string.length === 0) return Buffer.allocUnsafe(0)

              var bytes = [0]
              for (var i = 0; i < string.length; i++) {
                var value = ALPHABET_MAP[string[i]]
                if (value === undefined) return

                for (var j = 0, carry = value; j < bytes.length; ++j) {
                  carry += bytes[j] * BASE
                  bytes[j] = carry & 0xff
                  carry >>= 8
                }

                while (carry > 0) {
                  bytes.push(carry & 0xff)
                  carry >>= 8
                }
              }

              // deal with leading zeros
              for (
                var k = 0;
                string[k] === LEADER && k < string.length - 1;
                ++k
              ) {
                bytes.push(0)
              }

              return Buffer.from(bytes.reverse())
            }

            function decode(string) {
              var buffer = decodeUnsafe(string)
              if (buffer) return buffer

              throw new Error('Non-base' + BASE + ' character')
            }

            return {
              encode: encode,
              decodeUnsafe: decodeUnsafe,
              decode: decode,
            }
          }
        },
        { 'safe-buffer': 6 },
      ],
      5: [
        function(require, module, exports) {
          var basex = require('base-x')
          var ALPHABET =
            '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

          module.exports = basex(ALPHABET)
        },
        { 'base-x': 4 },
      ],
      6: [
        function(require, module, exports) {
          /* eslint-disable node/no-deprecated-api */
          var buffer = require('buffer')
          var Buffer = buffer.Buffer

          // alternative to using Object.keys for old browsers
          function copyProps(src, dst) {
            for (var key in src) {
              dst[key] = src[key]
            }
          }
          if (
            Buffer.from &&
            Buffer.alloc &&
            Buffer.allocUnsafe &&
            Buffer.allocUnsafeSlow
          ) {
            module.exports = buffer
          } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
          }

          function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
          }

          // Copy static methods from Buffer
          copyProps(Buffer, SafeBuffer)

          SafeBuffer.from = function(arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
              throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
          }

          SafeBuffer.alloc = function(size, fill, encoding) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
              if (typeof encoding === 'string') {
                buf.fill(fill, encoding)
              } else {
                buf.fill(fill)
              }
            } else {
              buf.fill(0)
            }
            return buf
          }

          SafeBuffer.allocUnsafe = function(size) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
          }

          SafeBuffer.allocUnsafeSlow = function(size) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
          }
        },
        { buffer: 2 },
      ],
    },
    {},
    [5]
  )(5)
})

function decodeUTF8(s) {
  if (typeof s !== 'string') throw new TypeError('expected string')
  var i, d = unescape(s), b = new Uint8Array(d.length)
  for (i = 0; i < d.length; i++) {
    b[i] = d.charCodeAt(i)
  }
  var i, d = unescape(s), b = new Uint8Array(d.length)
  for (i = 0; i < d.length; i++) {
    b[i] = d.charCodeAt(i)
  }
  return b
}

function getVerKey(seed) {
  var keypair = nacl.sign.keyPair.fromSeed(decodeUTF8(seed))
  return bs58.encode(keypair.publicKey)
}

function sign(message, seed) {
  var keypair = nacl.sign.keyPair.fromSeed(decodeUTF8(seed))
  var verKey = keypair.publicKey
  var signingKey = keypair.secretKey
  var challenge = JSON.stringify(message)
  var signature = bs58.encode(
    nacl.sign.detached(decodeUTF8(challenge), signingKey)
  )
  return JSON.stringify({ challenge, signature })
}

/*
* how to use this script
 const seed = "ea010000000000000000000000000000"
 const verKey = getVerKey(seed)
 const body = sign({verKey}, seed)
 // pass body in postman
*/
