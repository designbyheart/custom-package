ENV['DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS'] = '-t DAV'

fastlane_version "2.73.0"

default_platform :ios

platform :ios do
  build_type = "QAConnectMe Build"

  before_all do
     ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  end

  lane :beta do
      reset_git_repo(force: true)
      cocoapods
      increment_build_number(xcodeproj: "ConnectMe.xcodeproj")
      app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
      match(
        type: "adhoc",
        app_identifier: "#{app_identifier}",
        force_for_new_devices: true
      )
      disable_automatic_code_signing(path: "ConnectMe.xcodeproj")
      profile = ENV["sigh_#{app_identifier}_adhoc"]
      gym(
        scheme: "ConnectMe",
        xcargs: "PROVISIONING_PROFILE_SPECIFIER='#{profile}' DEVELOPMENT_TEAM='ES8QU3D2A4'",
        clean: true
      )
      remote_branch = git_branch
      remote_branch = remote_branch.split('/').last

      if remote_branch == "master"
        hockey(api_token: ENV["QA_HOCKEYAPP_TOKEN"])
      elsif remote_branch == "stage"
        build_type = "ConnectMe Stage Build"
        hockey(api_token: ENV["STAGE_HOCKEYAPP_TOKEN"])
      else
        build_type = "ConnectMe Dev Build"
        hockey(api_token: ENV["DEV_HOCKEYAPP_TOKEN"])
      end
     if remote_branch == "master" || remote_branch == "stage" || remote_branch == "stable" 
       match(
         type: "appstore",
         app_identifier: "#{app_identifier}",
         force_for_new_devices: true
      )
       disable_automatic_code_signing(path: "ConnectMe.xcodeproj")
       profile = ENV["sigh_#{app_identifier}_appstore"]
       gym(
         scheme: "ConnectMe",
         xcargs: "PROVISIONING_PROFILE_SPECIFIER='#{profile}' DEVELOPMENT_TEAM='ES8QU3D2A4'",
         clean: true
      )
      deliver(force: true)
     end
      commit_version_bump(
        message: "Build Version bump by Fastlane [ci skip]",
        xcodeproj: "ConnectMe.xcodeproj",
        force: true
      )
      push_to_git_remote(
        remote: "origin",         
        local_branch: "HEAD",  
        remote_branch: "#{remote_branch}",
        force: true,
        tags: false
      )
  end

  after_all do |lane|
     commit_message = ENV["GIT_CLONE_COMMIT_MESSAGE_BODY"]
     build_number = get_build_number(xcodeproj: "ConnectMe.xcodeproj")
     slack(channel: "connectme_build", message: "#{build_type} ##{build_number} Sandbox! #{commit_message}")
  end

  error do |lane, exception|
     slack(
       channel: "connectme_build",
       message: exception.message,
       success: false
     )
  end
end
