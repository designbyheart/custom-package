//
//  ConnectSingleton.h
//  ConnectMeIndy
//
//  Created by Anastasia Tarasova on 27/09/2017.
//  Copyright Â© 2017 hyperledger. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "CMPoolObject.h"
#import "CMWalletObject.h"
#import "CMTypes.h"

@interface ConnectMeIndy : NSObject

+ (ConnectMeIndy *)sharedInstance;

/**
 Pool object to work with Indy pool.
 */
@property (strong) CMPoolObject* pool;

/**
 Wallet object to work with Indy pool.
 */
@property (strong) CMWalletObject * wallet;
   
/**
 Identity JSON used to generate my DID.
 Default: {}
 */
@property (strong) NSString *myIdentityJson;


// MARK: - Utility properties

/**
 Serial queue, used to execute all operations
 */
- (dispatch_queue_t)queue;



/**
 Calls when peer accepts a connection request from remoteDid.
 

 Alghoritm:
 1. Prepare pool and wallet if needed.
 2. Check if a pairwiseDid is already stored for remoteDid
 3. If pairwise is not stored:
     Create myDid with IndySignus:createAndStoreMyDid.
     Create pairwise pair remoteDid:myDid and store in wallet with IndyPairwise: createPairwise.
 4. Store metadata.
 5. Return completion block, containing error and json in format: {"verificationKey": "generatedVerificationKey", "userDID": "generated pairwise DID for passed remoteDID"}
 
 
 @param remoteDid Id of receiver identity.
 @param remoteVerkey Verification key of remoteDID.
 @param metadata Optional. Dictionaty with format: {String: Any}.
 @param completion Completion block, returns error and json with info about generated pairwise did. Will be invoked in Main thread.
 */
- (void)addConnectionWithRemoteDid:(NSString *)remoteDid
                      remoteVerkey:(NSString *)remoteVerkey
                          metadata:(NSDictionary *)metadata
                        completion:(void (^)(NSError *error, NSString *pairwiseInfo)) completion;


/**
 Returns pairwiseDid amd metadata, stored for remoteDid in wallet.
 
 Alghoritm:
 1. Prepare pool and wallet if needed.
 2. Get pairwise data from wallet with IndyPairwise:getPairwise
 3. Parce JSON and return completion block.
 
 @param remoteDid Remote DID
 @param completion Completion block, returns error, pairwise did and metedata for remoteDid. Will be invoked in main thread.
 */
- (void)getConnectionForDid:(NSString *)remoteDid
                   completion:(void (^)(NSError *error,
                                        NSString * did,
                                        NSString * metadata)) completion;

/**
 Encrypt payload for remote DID.
 
 Alghoritm:
 1. Prepare pool and wallet if needed.
 2. Get pairwise data from wallet with IndyPairwise:getPairwise.
 3. Encrypt payload and return encrypted payload and nonce as Base58 strings.
 
 @param payload String in UTF8 format that will be encrypted.
 @param remoteDid Remote DID
 @param completion Completion block, returns error, encryptedPayload and nonce strings in Base58 encoding. Will be invoked in main thread.
 */
- (void)encryptPayload:(NSString *)payload
          forRemoteDid:(NSString *)remoteDid
            completion:(void (^)(NSError *error,
                                 NSString * encryptedPayload,
                                 NSString * nonce)) completion;

/**
 Payload is a string in base58 format
 
 Dencrypt payload using remoteDid's pairwise DID.
 
 Alghoritm
 1. Prepare pool and wallet if needed.
 2. Get pairwise data from wallet with IndyPairwise:getPairwise.
 3. Decode payload.
 
 @param payload String in Base58 encoding that will be dencrypted.
 @param nonce String in base58 encoding, generated by encode method. Decryption key.
 @param remoteDid Remote DID.
 @param completion Completion block, returns error and decryptedPayload in utf-8 encoding. Will be invoked in main thread.
 */
- (void)decryptPayload:(NSString *)payload
             withNonce:(NSString *)nonce
          forRemoteDid:(NSString *)remoteDid
            completion:(void (^)(NSError *error,
                                 NSString * decryptedPayload)) completion;



/**
 
 Generate claim request for remoteDid using claimOffer
 
 @note You must call ConnectMeSingleton::createMasterSecretNamed beforehand.
 
 @code
 returned claimRequest format:
 {
       "blinded_ms" : <blinded_master_secret>,
       "schema_seq_no" : <schema_seq_no>,
       "issuer_did" : <issuer_did>
 }
 @endcode
 
 Alghoritm:
 1. Prepare pool and wallet if needed.
 2. Get pairwise data from wallet with IndyPairwise:getPairwise.
 3. Get schema sequence number from claimOffer.
 4. Get claimDefinition from ledger using schemaSeqNo from claimOffer.
 5. Create and store claim request.
 6. Return completion.
 
 @param remoteDid Remote DID
 @param claimOffer Claim Offer in format:
 @param completion Completion block, returns error and generated claimRequest. Will be invoked in main thread.
 */
- (void)generateClaimRequestForRemoteDid:(NSString *)remoteDid
                              claimOffer:(NSString *)claimOffer
                              completion:(void (^)(NSError *error,
                                                   NSString *generatedClaimReqJSON))completion;

/**
 
 Stores the given claim and returns a configured filterJSON to fetch it from wallet later.
 
 @code
 FilterJSON format:
 {
          "issuer_did": string,
          "schema_seq_no": string
 }
 @endcode
 
 @param claimJSON Claim JSON to be stored.
 @param completion Completion block, returns error code and filterJSON which contains an issuerDid and schemaSeqNo, fetched from provided claim. Will be invoked in main thread.
 */
- (void)addClaim:(NSString *)claimJSON
      completion:(void (^)(NSError *error, NSString *filterJson))completion;

/**
 Will search for claim with provided filterJSON.
 
 @param filterJSON Filter json, contains { "issuer_did": string, "schema_seq_no": string }
 @param completion Completion block, returns error and search result. Will be invoked in main thread.
 */
- (void)getClaimForFilter:(NSString *)filterJSON
               completion:(void (^)(NSError *error, NSString *claim))completion;

/**
 
 
 @code
 
 Returned ClaimsJSON format:
 {
     "attrs": {
         "attr_1_uuid": {claim}
     },
     "predicates":{
         "predicate_1_uuid" : {claim}
     }
 }
 
 where claim is:
 {
          "claim_uuid": <string>,
          "attrs": [{"attr_name" : "attr_value"}],
          "schema_seq_no": string,
          "issuer_did": string,
          "revoc_reg_seq_no": string,
  }
 
 @endcode
 
 Alghoritm:
 1. Prepare pool and wallet if needed.
 2. Call proverGetClaimsForProofReq
 3. Return result json in completion.
 
 Will fetch claims for proofRequest and return them as JSON.
 
 @param proofRequest Proof request
 @param completion Completion block, returns error and fetched claims JSON. Will be invoked in main thread.
 */
- (void)prepareProofForRequest:(NSString *)proofRequest
                    completion:(void (^)(NSError *error, NSString *claimsJSON))completion;

/**
 
 Generate a proof rquest.
 
 @code
 
 Example of requestedClaimsJSON
 requested_claims_json
 {
 "self_attested_attributes":{},
 "requested_attrs":{"attr1_uuid":["claim::d28580c0-e268-4a06-ab62-d1c7c496d6fa",true]},
 "requested_predicates":{"predicate1_uuid":"claim::d28580c0-e268-4a06-ab62-d1c7c496d6fa"}
 }
 @endcode
 
 @param proofRequest Proof Request
 @param requestedClaimsJson Requested claims json in format described above.
 @param claims Result of prepareProof function. This is needed to get all issuer_did and schema_seq_no pairs for claims and get from ledger schemas and claim defs.
 @completion Completion block, will return error code and generated proof. will be invoked in main thread.
 */
- (void)generateProofForRequest:(NSString *)proofRequest
                      remoteDid:(NSString *)remoteDid
            requestedClaimsJson:(NSDictionary*)requestedClaimsJson
                         claims:(NSString *)claims
                     completion:(void (^)(NSError *error, NSString *generatedProof))completion;

/**
 Create a Master Secret.
 
 If function succeeded, masterSecretName will be stored as singletone's parameter.
 */
- (void)createMasterSecretNamed:(NSString *)masterSecretName
                     completion:(void (^)(NSError *error)) completion;

/**
 Will configure pool and wallet and return their handles in completion.
 */
- (void)obtainHandles:(void (^)(NSError *error, CMHandle walletHandle, CMHandle poolHandle)) completion;

@end
